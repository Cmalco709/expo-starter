{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"hint\", \"color\", \"forwardedRef\", \"formatter\", \"useGestureHandlerInput\", \"readonly\"];\nvar _jsxFileName = \"/workspaces/expo-starter/node_modules/react-native-ui-lib/src/incubator/TextField/Input.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useContext, useMemo } from 'react';\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar DEFAULT_INPUT_COLOR = {\n  default: Colors.$textDefault,\n  disabled: Colors.$textDisabled,\n  readonly: Colors.$textNeutral\n};\nvar Input = function Input(_ref) {\n  var style = _ref.style,\n    hint = _ref.hint,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? DEFAULT_INPUT_COLOR : _ref$color,\n    forwardedRef = _ref.forwardedRef,\n    formatter = _ref.formatter,\n    useGestureHandlerInput = _ref.useGestureHandlerInput,\n    readonly = _ref.readonly,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  var context = useContext(FieldContext);\n  var placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  var inputColor = getColorByState(color, context);\n  var placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  var value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  var disabled = props.editable === false || readonly;\n  var TextInput = useMemo(function () {\n    if (useGestureHandlerInput) {\n      var _require = require('react-native-gesture-handler'),\n        GestureTextInput = _require.TextInput;\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return _jsxDEV(TextInput, _objectSpread(_objectSpread({\n    style: [styles.input, !!inputColor && {\n      color: inputColor\n    }, style, Constants.isWeb && styles.webStyle]\n  }, props), {}, {\n    editable: !disabled,\n    value: value,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    accessibilityState: {\n      disabled: disabled\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, _this);\n};\nvar styles = StyleSheet.create({\n  input: _objectSpread({\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    paddingTop: 0,\n    paddingBottom: 0\n  }, Platform.select({\n    android: {\n      padding: 0,\n      textAlignVertical: 'center'\n    }\n  })),\n  webStyle: {\n    outlineWidth: 0\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;","map":{"version":3,"names":["React","useContext","useMemo","RNTextInput","StyleSheet","Platform","Constants","getColorByState","Colors","FieldContext","useImperativeInputHandle","jsxDEV","_jsxDEV","DEFAULT_INPUT_COLOR","default","$textDefault","disabled","$textDisabled","readonly","$textNeutral","Input","_ref","style","hint","_ref$color","color","forwardedRef","formatter","useGestureHandlerInput","props","_objectWithoutProperties","_excluded","inputRef","onChangeText","context","placeholder","isFocused","inputColor","placeholderTextColor","value","editable","TextInput","_require","require","GestureTextInput","_objectSpread","styles","input","isWeb","webStyle","ref","underlineColorAndroid","accessibilityState","fileName","_jsxFileName","lineNumber","columnNumber","_this","create","flexGrow","textAlign","isRTL","paddingTop","paddingBottom","select","android","padding","textAlignVertical","outlineWidth","displayName"],"sources":["/workspaces/expo-starter/node_modules/react-native-ui-lib/src/incubator/TextField/Input.js"],"sourcesContent":["import React, { useContext, useMemo } from 'react';\nimport { TextInput as RNTextInput, StyleSheet, Platform } from 'react-native';\nimport { Constants } from \"../../commons/new\";\nimport { getColorByState } from \"./Presenter\";\nimport { Colors } from \"../../style\";\nimport FieldContext from \"./FieldContext\";\nimport useImperativeInputHandle from \"./useImperativeInputHandle\";\nconst DEFAULT_INPUT_COLOR = {\n  default: Colors.$textDefault,\n  disabled: Colors.$textDisabled,\n  readonly: Colors.$textNeutral\n};\nconst Input = ({\n  style,\n  hint,\n  color = DEFAULT_INPUT_COLOR,\n  forwardedRef,\n  formatter,\n  useGestureHandlerInput,\n  readonly,\n  ...props\n}) => {\n  const inputRef = useImperativeInputHandle(forwardedRef, {\n    onChangeText: props.onChangeText\n  });\n  const context = useContext(FieldContext);\n  const placeholder = !context.isFocused ? props.placeholder : hint || props.placeholder;\n  const inputColor = getColorByState(color, context);\n  const placeholderTextColor = getColorByState(props.placeholderTextColor, context);\n  const value = formatter && !context.isFocused ? formatter(props.value) : props.value;\n  const disabled = props.editable === false || readonly;\n  const TextInput = useMemo(() => {\n    if (useGestureHandlerInput) {\n      const {\n        TextInput: GestureTextInput\n      } = require('react-native-gesture-handler');\n      return GestureTextInput;\n    } else {\n      return RNTextInput;\n    }\n  }, [useGestureHandlerInput]);\n  return <TextInput style={[styles.input, !!inputColor && {\n    color: inputColor\n  }, style, Constants.isWeb && styles.webStyle]} {...props} editable={!disabled} value={value} placeholder={placeholder} placeholderTextColor={placeholderTextColor}\n  // @ts-expect-error\n  ref={inputRef} underlineColorAndroid=\"transparent\" accessibilityState={{\n    disabled\n  }} />;\n};\nconst styles = StyleSheet.create({\n  input: {\n    flexGrow: 1,\n    textAlign: Constants.isRTL ? 'right' : 'left',\n    // Setting paddingTop/Bottom separately fix height issues on iOS with multiline\n    paddingTop: 0,\n    paddingBottom: 0,\n    ...Platform.select({\n      // This reset android input inner spacing\n      android: {\n        padding: 0,\n        textAlignVertical: 'center'\n      }\n    })\n  },\n  webStyle: {\n    // @ts-expect-error\n    outlineWidth: 0\n  }\n});\nInput.displayName = 'Incubator.TextField';\nexport default Input;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
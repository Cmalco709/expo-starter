{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { reaction } from 'mobx';\nimport { stores } from \"../stores\";\nimport { services } from \"../services\";\nimport { configureDesignSystem } from \"./designSystem\";\nexport var useAppearance = function useAppearance() {\n  useColorScheme();\n  var ui = stores.ui;\n  var t = services.t;\n  var _useState = useState(ui.appearance),\n    _useState2 = _slicedToArray(_useState, 2),\n    appearance = _useState2[0],\n    setAppearance = _useState2[1];\n  var _useState3 = useState(ui.language),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lang = _useState4[0],\n    setLang = _useState4[1];\n  reaction(function () {\n    return ui.appearance;\n  }, function (appearance) {\n    configureDesignSystem();\n    setAppearance(appearance);\n  });\n  reaction(function () {\n    return ui.language;\n  }, function (language) {\n    t.setup();\n    setLang(language);\n  });\n  return {\n    appearance: appearance,\n    lang: lang\n  };\n};","map":{"version":3,"names":["useState","useColorScheme","reaction","stores","services","configureDesignSystem","useAppearance","ui","t","_useState","appearance","_useState2","_slicedToArray","setAppearance","_useState3","language","_useState4","lang","setLang","setup"],"sources":["/workspaces/expo-starter/src/utils/hooks.ts"],"sourcesContent":["import {useState} from 'react';\nimport {useColorScheme} from 'react-native';\nimport {reaction} from 'mobx';\n\nimport {stores} from '@app/stores';\nimport {services} from '@app/services';\nimport {configureDesignSystem} from '@app/utils/designSystem';\n\n// put this hook into any component which you'd like to keep in sync with appearance\n// for example, Main screen or list item component\nexport const useAppearance = () => {\n  useColorScheme();\n\n  const {ui} = stores;\n  const {t} = services;\n\n  const [appearance, setAppearance] = useState(ui.appearance);\n  const [lang, setLang] = useState(ui.language);\n\n  reaction(\n    () => ui.appearance,\n    appearance => {\n      configureDesignSystem();\n      setAppearance(appearance);\n    },\n  );\n  reaction(\n    () => ui.language,\n    language => {\n      t.setup();\n      setLang(language);\n    },\n  );\n\n  return {appearance, lang};\n};\n"],"mappings":";AAAA,SAAQA,QAAQ,QAAO,OAAO;AAAC,OAAAC,cAAA;AAE/B,SAAQC,QAAQ,QAAO,MAAM;AAE7B,SAAQC,MAAM;AACd,SAAQC,QAAQ;AAChB,SAAQC,qBAAqB;AAI7B,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EACjCL,cAAc,CAAC,CAAC;EAEhB,IAAOM,EAAE,GAAIJ,MAAM,CAAZI,EAAE;EACT,IAAOC,CAAC,GAAIJ,QAAQ,CAAbI,CAAC;EAER,IAAAC,SAAA,GAAoCT,QAAQ,CAACO,EAAE,CAACG,UAAU,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAApDC,UAAU,GAAAC,UAAA;IAAEE,aAAa,GAAAF,UAAA;EAChC,IAAAG,UAAA,GAAwBd,QAAQ,CAACO,EAAE,CAACQ,QAAQ,CAAC;IAAAC,UAAA,GAAAJ,cAAA,CAAAE,UAAA;IAAtCG,IAAI,GAAAD,UAAA;IAAEE,OAAO,GAAAF,UAAA;EAEpBd,QAAQ,CACN;IAAA,OAAMK,EAAE,CAACG,UAAU;EAAA,GACnB,UAAAA,UAAU,EAAI;IACZL,qBAAqB,CAAC,CAAC;IACvBQ,aAAa,CAACH,UAAU,CAAC;EAC3B,CACF,CAAC;EACDR,QAAQ,CACN;IAAA,OAAMK,EAAE,CAACQ,QAAQ;EAAA,GACjB,UAAAA,QAAQ,EAAI;IACVP,CAAC,CAACW,KAAK,CAAC,CAAC;IACTD,OAAO,CAACH,QAAQ,CAAC;EACnB,CACF,CAAC;EAED,OAAO;IAACL,UAAU,EAAVA,UAAU;IAAEO,IAAI,EAAJA;EAAI,CAAC;AAC3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/workspaces/expo-starter/node_modules/react-native-ui-lib/src/components/timeline/Line.js\",\n  _this = this;\nimport React, { useMemo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"../view\";\nimport Dash from \"../dash\";\nimport { LineTypes } from \"./types\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar LINE_WIDTH = 2;\nvar ENTRY_POINT_HEIGHT = 2;\nvar Line = React.memo(function (props) {\n  var type = props.type,\n    _props$color = props.color,\n    color = _props$color === void 0 ? 'transparent' : _props$color,\n    entry = props.entry,\n    top = props.top,\n    style = props.style;\n  var solidLineStyle = useMemo(function () {\n    return [style, styles.solidLine, {\n      backgroundColor: color\n    }];\n  }, [color, style]);\n  var dashedLineStyle = useMemo(function () {\n    return [style, styles.dashedLine];\n  }, [style]);\n  var renderStartPoint = function renderStartPoint() {\n    if (entry) {\n      return _jsxDEV(View, {\n        style: [styles.entryPoint, {\n          backgroundColor: color\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, _this);\n    }\n  };\n  var renderLine = function renderLine() {\n    if (type === LineTypes.DASHED) {\n      return _jsxDEV(Dash, {\n        vertical: true,\n        color: color,\n        containerStyle: dashedLineStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }, _this);\n    }\n    return _jsxDEV(View, {\n      style: solidLineStyle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, _this);\n  };\n  return _jsxDEV(_Fragment, {\n    children: [top && renderStartPoint(), renderLine(), !top && renderStartPoint()]\n  }, void 0, true);\n});\nexport default Line;\nvar styles = StyleSheet.create({\n  entryPoint: {\n    width: 12,\n    height: ENTRY_POINT_HEIGHT\n  },\n  solidLine: {\n    width: LINE_WIDTH,\n    overflow: 'hidden'\n  },\n  dashedLine: {\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","useMemo","StyleSheet","View","Dash","LineTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","LINE_WIDTH","ENTRY_POINT_HEIGHT","Line","memo","props","type","_props$color","color","entry","top","style","solidLineStyle","styles","solidLine","backgroundColor","dashedLineStyle","dashedLine","renderStartPoint","entryPoint","fileName","_jsxFileName","lineNumber","columnNumber","_this","renderLine","DASHED","vertical","containerStyle","children","create","width","height","overflow"],"sources":["/workspaces/expo-starter/node_modules/react-native-ui-lib/src/components/timeline/Line.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport View from \"../view\";\nimport Dash from \"../dash\";\nimport { LineTypes } from \"./types\";\nconst LINE_WIDTH = 2;\nconst ENTRY_POINT_HEIGHT = 2;\nconst Line = React.memo(props => {\n  const {\n    type,\n    color = 'transparent',\n    entry,\n    top,\n    style\n  } = props;\n  const solidLineStyle = useMemo(() => {\n    return [style, styles.solidLine, {\n      backgroundColor: color\n    }];\n  }, [color, style]);\n  const dashedLineStyle = useMemo(() => {\n    return [style, styles.dashedLine];\n  }, [style]);\n  const renderStartPoint = () => {\n    if (entry) {\n      return <View style={[styles.entryPoint, {\n        backgroundColor: color\n      }]} />;\n    }\n  };\n  const renderLine = () => {\n    if (type === LineTypes.DASHED) {\n      return <Dash vertical color={color} containerStyle={dashedLineStyle} />;\n    }\n    return <View style={solidLineStyle} />;\n  };\n  return <>\n      {top && renderStartPoint()}\n      {renderLine()}\n      {!top && renderStartPoint()}\n    </>;\n});\nexport default Line;\nconst styles = StyleSheet.create({\n  entryPoint: {\n    width: 12,\n    height: ENTRY_POINT_HEIGHT\n  },\n  solidLine: {\n    width: LINE_WIDTH,\n    overflow: 'hidden'\n  },\n  dashedLine: {\n    overflow: 'hidden'\n  }\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AAAC,OAAAC,UAAA;AAEvC,OAAOC,IAAI;AACX,OAAOC,IAAI;AACX,SAASC,SAAS;AAAkB,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpC,IAAMC,UAAU,GAAG,CAAC;AACpB,IAAMC,kBAAkB,GAAG,CAAC;AAC5B,IAAMC,IAAI,GAAGZ,KAAK,CAACa,IAAI,CAAC,UAAAC,KAAK,EAAI;EAC/B,IACEC,IAAI,GAKFD,KAAK,CALPC,IAAI;IAAAC,YAAA,GAKFF,KAAK,CAJPG,KAAK;IAALA,KAAK,GAAAD,YAAA,cAAG,aAAa,GAAAA,YAAA;IACrBE,KAAK,GAGHJ,KAAK,CAHPI,KAAK;IACLC,GAAG,GAEDL,KAAK,CAFPK,GAAG;IACHC,KAAK,GACHN,KAAK,CADPM,KAAK;EAEP,IAAMC,cAAc,GAAGpB,OAAO,CAAC,YAAM;IACnC,OAAO,CAACmB,KAAK,EAAEE,MAAM,CAACC,SAAS,EAAE;MAC/BC,eAAe,EAAEP;IACnB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACA,KAAK,EAAEG,KAAK,CAAC,CAAC;EAClB,IAAMK,eAAe,GAAGxB,OAAO,CAAC,YAAM;IACpC,OAAO,CAACmB,KAAK,EAAEE,MAAM,CAACI,UAAU,CAAC;EACnC,CAAC,EAAE,CAACN,KAAK,CAAC,CAAC;EACX,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA,EAAS;IAC7B,IAAIT,KAAK,EAAE;MACT,OAAOX,OAAA,CAACJ,IAAI;QAACiB,KAAK,EAAE,CAACE,MAAM,CAACM,UAAU,EAAE;UACtCJ,eAAe,EAAEP;QACnB,CAAC;MAAE;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAE,CAAC;IACR;EACF,CAAC;EACD,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvB,IAAInB,IAAI,KAAKV,SAAS,CAAC8B,MAAM,EAAE;MAC7B,OAAO5B,OAAA,CAACH,IAAI;QAACgC,QAAQ;QAACnB,KAAK,EAAEA,KAAM;QAACoB,cAAc,EAAEZ;MAAgB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAE,CAAC;IACzE;IACA,OAAO1B,OAAA,CAACJ,IAAI;MAACiB,KAAK,EAAEC;IAAe;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC;EACxC,CAAC;EACD,OAAO1B,OAAA,CAAAE,SAAA;IAAA6B,QAAA,GACFnB,GAAG,IAAIQ,gBAAgB,CAAC,CAAC,EACzBO,UAAU,CAAC,CAAC,EACZ,CAACf,GAAG,IAAIQ,gBAAgB,CAAC,CAAC;EAAA,eAC3B,CAAC;AACP,CAAC,CAAC;AACF,eAAef,IAAI;AACnB,IAAMU,MAAM,GAAGpB,UAAU,CAACqC,MAAM,CAAC;EAC/BX,UAAU,EAAE;IACVY,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE9B;EACV,CAAC;EACDY,SAAS,EAAE;IACTiB,KAAK,EAAE9B,UAAU;IACjBgC,QAAQ,EAAE;EACZ,CAAC;EACDhB,UAAU,EAAE;IACVgB,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
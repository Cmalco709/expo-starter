{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { CommonActions, createNavigationContainerRef, DrawerActions, NavigationContainer, StackActions, TabActions, useNavigation, useRoute } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavioTunnel } from \"./tunnel\";\nimport { safeOpts } from \"./help\";\nexport var Navio = function () {\n  function Navio(data) {\n    var _this = this;\n    _classCallCheck(this, Navio);\n    this.__tabsUpdatedOptions = {};\n    this.__drawerUpdatedOptions = {};\n    this.__modalParams = {};\n    this.navigate = function (name, params) {\n      if (_this.navIsReady) {\n        var _this$navRef$current;\n        (_this$navRef$current = _this.navRef.current) == null ? void 0 : _this$navRef$current.dispatch(CommonActions.navigate({\n          name: name,\n          params: params\n        }));\n      }\n    };\n    this.__StackGetNavigatorProps = function (definition) {\n      var _definition$navigator, _stacks$definition$na;\n      var stacks = _this.layout.stacks;\n      if (stacks === undefined) return {};\n      return Array.isArray(definition) ? {} : typeof definition === 'object' ? (_definition$navigator = definition.navigatorProps) != null ? _definition$navigator : {} : typeof definition === 'string' ? Array.isArray(stacks[definition]) ? {} : typeof stacks[definition] === 'object' ? (_stacks$definition$na = stacks[definition].navigatorProps) != null ? _stacks$definition$na : {} : {} : {};\n    };\n    this.__StackGetContainerOpts = function (definition) {\n      var _definition$options, _stacks$definition$op;\n      var stacks = _this.layout.stacks;\n      if (stacks === undefined) return {};\n      return Array.isArray(definition) ? {} : typeof definition === 'object' ? (_definition$options = definition.options) != null ? _definition$options : {} : typeof definition === 'string' ? Array.isArray(stacks[definition]) ? {} : typeof stacks[definition] === 'object' ? (_stacks$definition$op = stacks[definition].options) != null ? _stacks$definition$op : {} : {} : {};\n    };\n    this.__StackGetScreens = function (definition) {\n      var _definition$screens, _stacks$definition$sc;\n      var stacks = _this.layout.stacks;\n      if (stacks === undefined) return [];\n      return Array.isArray(definition) ? definition : typeof definition === 'object' ? (_definition$screens = definition.screens) != null ? _definition$screens : [] : typeof definition === 'string' ? Array.isArray(stacks[definition]) ? stacks[definition] : typeof stacks[definition] === 'object' ? (_stacks$definition$sc = stacks[definition].screens) != null ? _stacks$definition$sc : [] : [] : [];\n    };\n    this.StackScreen = function (_ref) {\n      var _this$getCustomDefaul, _this$getCustomDefaul2, _this$getCustomDefaul3, _globalDefaultOptions, _globalDefaultOptions2;\n      var StackNavigator = _ref.StackNavigator,\n        name = _ref.name;\n      var _this$layout = _this.layout,\n        screens = _this$layout.screens,\n        globalDefaultOptions = _this$layout.defaultOptions;\n      var screen = screens[name];\n      var sComponent;\n      var sOptions;\n      if (typeof screen === 'object') {\n        if (screen.component) {\n          var _screen$options;\n          sComponent = screen.component;\n          sOptions = (_screen$options = screen.options) != null ? _screen$options : {};\n        } else {\n          sComponent = screen;\n          sOptions = {};\n        }\n      } else {\n        sComponent = screen;\n        sOptions = {};\n      }\n      var C = sComponent;\n      var customDefaultOptions = (_this$getCustomDefaul = (_this$getCustomDefaul2 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul3 = _this$getCustomDefaul2.stacks) == null ? void 0 : _this$getCustomDefaul3.screen) != null ? _this$getCustomDefaul : {};\n      var defaultOptions = (_globalDefaultOptions = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions2 = globalDefaultOptions.stacks) == null ? void 0 : _globalDefaultOptions2.screen) != null ? _globalDefaultOptions : {};\n      var Opts = function Opts(props) {\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(sOptions)(props)), safeOpts(C.options)(props));\n      };\n      return React.createElement(StackNavigator.Screen, {\n        key: name,\n        name: name,\n        component: C,\n        options: Opts\n      });\n    };\n    this.Stack = function (_ref2) {\n      var definition = _ref2.definition;\n      if (!definition) return null;\n      var _this$layout2 = _this.layout,\n        screens = _this$layout2.screens,\n        stacks = _this$layout2.stacks,\n        hooks = _this$layout2.hooks;\n      if (hooks) for (var h of hooks) if (h) h();\n      if (!screens) {\n        _this.log('No screens registered');\n        return React.createElement(React.Fragment, null);\n      }\n      if (!stacks) {\n        _this.log('No stacks registered');\n        return React.createElement(React.Fragment, null);\n      }\n      var Stack = createNativeStackNavigator();\n      var StackScreensMemo = useMemo(function () {\n        return _this.__StackGetScreens(definition).map(function (sk) {\n          return _this.StackScreen({\n            StackNavigator: Stack,\n            name: sk\n          });\n        });\n      }, [definition, screens, stacks]);\n      var navigatorProps = _this.__StackGetNavigatorProps(definition);\n      return React.createElement(Stack.Navigator, _objectSpread({}, navigatorProps), StackScreensMemo);\n    };\n    this.StackContainer = function (_ref3) {\n      var _this$getCustomDefaul4, _this$getCustomDefaul5, _this$getCustomDefaul6, _globalDefaultOptions3, _globalDefaultOptions4;\n      var Navigator = _ref3.Navigator,\n        definition = _ref3.definition,\n        name = _ref3.name;\n      var globalDefaultOptions = _this.layout.defaultOptions;\n      var C = function C() {\n        return _this.Stack({\n          definition: definition\n        });\n      };\n      var customDefaultOptions = (_this$getCustomDefaul4 = (_this$getCustomDefaul5 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul6 = _this$getCustomDefaul5.stacks) == null ? void 0 : _this$getCustomDefaul6.container) != null ? _this$getCustomDefaul4 : {};\n      var defaultOptions = (_globalDefaultOptions3 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions4 = globalDefaultOptions.tabs) == null ? void 0 : _globalDefaultOptions4.container) != null ? _globalDefaultOptions3 : {};\n      var options = _this.__StackGetContainerOpts(definition);\n      var Opts = function Opts(props) {\n        return _objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(options)(props));\n      };\n      return React.createElement(Navigator.Screen, {\n        key: name,\n        name: name,\n        options: Opts\n      }, function (props) {\n        return React.createElement(C, _objectSpread({}, props));\n      });\n    };\n    this.__TabsGet = function (definition) {\n      var tabs = _this.layout.tabs;\n      if (tabs === undefined) return undefined;\n      var currentTabs = typeof definition === 'string' ? tabs[definition] : undefined;\n      return currentTabs;\n    };\n    this.TabScreen = function (_ref4) {\n      var TabNavigator = _ref4.TabNavigator,\n        name = _ref4.name,\n        layout = _ref4.layout;\n      if (!layout.stack && !layout.drawer) {\n        _this.log(`Either 'stack' or 'drawer' must be provided for \"${name}\" tabs layout.`);\n        return null;\n      }\n      var C = function C() {\n        return layout.stack ? _this.Stack({\n          definition: layout.stack\n        }) : layout.drawer ? _this.Drawer({\n          definition: layout.drawer\n        }) : null;\n      };\n      return React.createElement(TabNavigator.Screen, {\n        key: name,\n        name: name,\n        component: C\n      });\n    };\n    this.Tabs = function (_ref5) {\n      var definition = _ref5.definition;\n      var _this$layout3 = _this.layout,\n        tabs = _this$layout3.tabs,\n        hooks = _this$layout3.hooks,\n        globalDefaultOptions = _this$layout3.defaultOptions;\n      if (!tabs) {\n        _this.log('No tabs registered');\n        return React.createElement(React.Fragment, null);\n      }\n      var currentTabs = _this.__TabsGet(definition);\n      if (!currentTabs) {\n        _this.log('No tabs defined found');\n        return React.createElement(React.Fragment, null);\n      }\n      var _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        updatedOptions = _useState2[0],\n        setUpdatedOptions = _useState2[1];\n      useEffect(function () {\n        _this.tunnel.on('tabs.updateOptions', function (params) {\n          var tcname = params.name;\n          var tcopts = params.options;\n          _this.__tabsUpdatedOptions = _objectSpread(_objectSpread({}, _this.__tabsUpdatedOptions), {}, _defineProperty({}, tcname, _objectSpread(_objectSpread({}, _this.__tabsUpdatedOptions[tcname]), tcopts)));\n          setUpdatedOptions(_this.__tabsUpdatedOptions);\n        });\n      }, [definition]);\n      var currentTabsLayout = useMemo(function () {\n        return currentTabs.layout;\n      }, [currentTabs]);\n      var currentTabsLayoutKeys = useMemo(function () {\n        return Object.keys(currentTabsLayout);\n      }, [currentTabsLayout]);\n      if (hooks) for (var h of hooks) if (h) h();\n      var Tabs = useMemo(function () {\n        return createBottomTabNavigator();\n      }, [tabs]);\n      var TabScreensMemo = useMemo(function () {\n        return currentTabsLayoutKeys.map(function (key) {\n          return _this.TabScreen({\n            name: key,\n            TabNavigator: Tabs,\n            layout: currentTabs.layout[key]\n          });\n        });\n      }, [Tabs, currentTabsLayoutKeys]);\n      var Opts = function Opts(props) {\n        var _props$route, _this$getCustomDefaul7, _this$getCustomDefaul8, _this$getCustomDefaul9, _globalDefaultOptions5, _globalDefaultOptions6, _currentTabs$navigato, _currentTabs$navigato2, _currentTabs$layout$r, _currentTabs$layout$r2, _updatedOptions$rName;\n        var rName = props == null ? void 0 : (_props$route = props.route) == null ? void 0 : _props$route.name;\n        if (!rName) return {};\n        var customDefaultOptions = (_this$getCustomDefaul7 = (_this$getCustomDefaul8 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul9 = _this$getCustomDefaul8.tabs) == null ? void 0 : _this$getCustomDefaul9.screen) != null ? _this$getCustomDefaul7 : {};\n        var defaultOpts = (_globalDefaultOptions5 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions6 = globalDefaultOptions.tabs) == null ? void 0 : _globalDefaultOptions6.screen) != null ? _globalDefaultOptions5 : {};\n        var navigatorScreenOptions = (_currentTabs$navigato = currentTabs == null ? void 0 : (_currentTabs$navigato2 = currentTabs.navigatorProps) == null ? void 0 : _currentTabs$navigato2.screenOptions) != null ? _currentTabs$navigato : {};\n        var options = (_currentTabs$layout$r = currentTabs == null ? void 0 : (_currentTabs$layout$r2 = currentTabs.layout[rName]) == null ? void 0 : _currentTabs$layout$r2.options) != null ? _currentTabs$layout$r : {};\n        var _updatedOptions = (_updatedOptions$rName = updatedOptions[rName]) != null ? _updatedOptions$rName : {};\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOpts)(props)), safeOpts(navigatorScreenOptions)(props)), safeOpts(options)(props)), safeOpts(_updatedOptions)(props));\n      };\n      return React.createElement(Tabs.Navigator, _objectSpread(_objectSpread({}, currentTabs.navigatorProps), {}, {\n        screenOptions: Opts\n      }), TabScreensMemo);\n    };\n    this.TabsContainer = function (_ref6) {\n      var _this$getCustomDefaul10, _this$getCustomDefaul11, _this$getCustomDefaul12, _globalDefaultOptions7, _globalDefaultOptions8, _this$__TabsGet$optio, _this$__TabsGet;\n      var Navigator = _ref6.Navigator,\n        definition = _ref6.definition,\n        name = _ref6.name;\n      var globalDefaultOptions = _this.layout.defaultOptions;\n      var C = function C() {\n        return _this.Tabs({\n          definition: definition\n        });\n      };\n      var customDefaultOptions = (_this$getCustomDefaul10 = (_this$getCustomDefaul11 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul12 = _this$getCustomDefaul11.tabs) == null ? void 0 : _this$getCustomDefaul12.container) != null ? _this$getCustomDefaul10 : {};\n      var defaultOptions = (_globalDefaultOptions7 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions8 = globalDefaultOptions.tabs) == null ? void 0 : _globalDefaultOptions8.container) != null ? _globalDefaultOptions7 : {};\n      var options = (_this$__TabsGet$optio = (_this$__TabsGet = _this.__TabsGet(definition)) == null ? void 0 : _this$__TabsGet.options) != null ? _this$__TabsGet$optio : {};\n      var Opts = function Opts(props) {\n        return _objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(options)(props));\n      };\n      return React.createElement(Navigator.Screen, {\n        key: name,\n        name: name,\n        component: C,\n        options: Opts\n      });\n    };\n    this.__DrawerGet = function (definition) {\n      var drawers = _this.layout.drawers;\n      if (drawers === undefined) return undefined;\n      var current = typeof definition === 'string' ? drawers[definition] : undefined;\n      return current;\n    };\n    this.DrawerScreen = function (_ref7) {\n      var DrawerNavigator = _ref7.DrawerNavigator,\n        name = _ref7.name,\n        layout = _ref7.layout;\n      if (!layout.stack && !layout.tabs) {\n        _this.log(`Either 'stack' or 'tabs' must be provided for \"${name}\" drawer layout.`);\n        return null;\n      }\n      var C = function C() {\n        return layout.stack ? _this.Stack({\n          definition: layout.stack\n        }) : layout.tabs ? _this.Tabs({\n          definition: layout.tabs\n        }) : null;\n      };\n      return React.createElement(DrawerNavigator.Screen, {\n        key: name,\n        name: name,\n        component: C\n      });\n    };\n    this.Drawer = function (_ref8) {\n      var definition = _ref8.definition;\n      var _this$layout4 = _this.layout,\n        drawers = _this$layout4.drawers,\n        globalDefaultOptions = _this$layout4.defaultOptions,\n        hooks = _this$layout4.hooks;\n      if (!drawers) {\n        _this.log('No drawers registered');\n        return React.createElement(React.Fragment, null);\n      }\n      var currentDrawer = _this.__DrawerGet(definition);\n      if (!currentDrawer) {\n        _this.log('No drawer found');\n        return React.createElement(React.Fragment, null);\n      }\n      var _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        updatedOptions = _useState4[0],\n        setUpdatedOptions = _useState4[1];\n      useEffect(function () {\n        _this.tunnel.on('drawer.updateOptions', function (params) {\n          var name = params.name;\n          var opts = params.options;\n          _this.__drawerUpdatedOptions = _objectSpread(_objectSpread({}, _this.__drawerUpdatedOptions), {}, _defineProperty({}, name, _objectSpread(_objectSpread({}, _this.__drawerUpdatedOptions[name]), opts)));\n          setUpdatedOptions(_this.__drawerUpdatedOptions);\n        });\n      }, [definition]);\n      var currentDrawerLayout = useMemo(function () {\n        return currentDrawer.layout;\n      }, [currentDrawer]);\n      var currentDrawerLayoutKeys = useMemo(function () {\n        return Object.keys(currentDrawerLayout);\n      }, [currentDrawerLayout]);\n      if (hooks) for (var h of hooks) if (h) h();\n      var Drawer = useMemo(function () {\n        return createDrawerNavigator();\n      }, [drawers]);\n      var DrawerScreensMemo = useMemo(function () {\n        return currentDrawerLayoutKeys.map(function (key) {\n          return _this.DrawerScreen({\n            name: key,\n            DrawerNavigator: Drawer,\n            layout: currentDrawer.layout[key]\n          });\n        });\n      }, [Drawer, currentDrawerLayoutKeys]);\n      var Opts = function Opts(props) {\n        var _props$route2, _this$getCustomDefaul13, _this$getCustomDefaul14, _this$getCustomDefaul15, _globalDefaultOptions9, _globalDefaultOptions10, _currentDrawer$naviga, _currentDrawer$naviga2, _currentDrawer$layout, _currentDrawer$layout2, _updatedOptions$rName2;\n        var rName = props == null ? void 0 : (_props$route2 = props.route) == null ? void 0 : _props$route2.name;\n        if (!rName) return {};\n        var customDefaultOptions = (_this$getCustomDefaul13 = (_this$getCustomDefaul14 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul15 = _this$getCustomDefaul14.drawers) == null ? void 0 : _this$getCustomDefaul15.screen) != null ? _this$getCustomDefaul13 : {};\n        var defaultOptions = (_globalDefaultOptions9 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions10 = globalDefaultOptions.drawers) == null ? void 0 : _globalDefaultOptions10.screen) != null ? _globalDefaultOptions9 : {};\n        var navigatorScreenOptions = (_currentDrawer$naviga = currentDrawer == null ? void 0 : (_currentDrawer$naviga2 = currentDrawer.navigatorProps) == null ? void 0 : _currentDrawer$naviga2.screenOptions) != null ? _currentDrawer$naviga : {};\n        var options = (_currentDrawer$layout = currentDrawer == null ? void 0 : (_currentDrawer$layout2 = currentDrawer.layout[rName]) == null ? void 0 : _currentDrawer$layout2.options) != null ? _currentDrawer$layout : {};\n        var _updatedOptions = (_updatedOptions$rName2 = updatedOptions[rName]) != null ? _updatedOptions$rName2 : {};\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(navigatorScreenOptions)(props)), safeOpts(options)(props)), safeOpts(_updatedOptions)(props));\n      };\n      return React.createElement(Drawer.Navigator, _objectSpread(_objectSpread({}, currentDrawer.navigatorProps), {}, {\n        screenOptions: Opts\n      }), DrawerScreensMemo);\n    };\n    this.DrawerContainer = function (_ref9) {\n      var _this$getCustomDefaul16, _this$getCustomDefaul17, _this$getCustomDefaul18, _globalDefaultOptions11, _globalDefaultOptions12, _this$__DrawerGet$opt, _this$__DrawerGet;\n      var Navigator = _ref9.Navigator,\n        definition = _ref9.definition,\n        name = _ref9.name;\n      var globalDefaultOptions = _this.layout.defaultOptions;\n      var C = function C() {\n        return _this.Drawer({\n          definition: definition\n        });\n      };\n      var customDefaultOptions = (_this$getCustomDefaul16 = (_this$getCustomDefaul17 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul18 = _this$getCustomDefaul17.drawers) == null ? void 0 : _this$getCustomDefaul18.container) != null ? _this$getCustomDefaul16 : {};\n      var defaultOptions = (_globalDefaultOptions11 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions12 = globalDefaultOptions.drawers) == null ? void 0 : _globalDefaultOptions12.container) != null ? _globalDefaultOptions11 : {};\n      var options = (_this$__DrawerGet$opt = (_this$__DrawerGet = _this.__DrawerGet(definition)) == null ? void 0 : _this$__DrawerGet.options) != null ? _this$__DrawerGet$opt : {};\n      var Opts = function Opts(props) {\n        return _objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(options)(props));\n      };\n      return React.createElement(Navigator.Screen, {\n        key: name,\n        name: name,\n        component: C,\n        options: Opts\n      });\n    };\n    this.__ModalGet = function (definition) {\n      var modals = _this.layout.modals;\n      if (modals === undefined) return undefined;\n      var currentModal = typeof definition === 'string' ? modals[definition] : undefined;\n      return currentModal;\n    };\n    this.ModalContainer = function (_ref10) {\n      var _this$getCustomDefaul19, _this$getCustomDefaul20, _this$getCustomDefaul21, _globalDefaultOptions13, _globalDefaultOptions14, _currentModal$options;\n      var Navigator = _ref10.Navigator,\n        definition = _ref10.definition,\n        name = _ref10.name;\n      var globalDefaultOptions = _this.layout.defaultOptions;\n      var currentModal = _this.__ModalGet(definition);\n      if (!currentModal) {\n        _this.log('No modal found');\n        return React.createElement(React.Fragment, null);\n      }\n      var clearParams = function clearParams(name) {\n        _this.__modalParams[name] = undefined;\n      };\n      var C = function C() {\n        return _this.Stack({\n          definition: currentModal == null ? void 0 : currentModal.stack\n        });\n      };\n      var customDefaultOptions = (_this$getCustomDefaul19 = (_this$getCustomDefaul20 = _this.getCustomDefaultOptions()) == null ? void 0 : (_this$getCustomDefaul21 = _this$getCustomDefaul20.modals) == null ? void 0 : _this$getCustomDefaul21.container) != null ? _this$getCustomDefaul19 : {};\n      var defaultOptions = (_globalDefaultOptions13 = globalDefaultOptions == null ? void 0 : (_globalDefaultOptions14 = globalDefaultOptions.modals) == null ? void 0 : _globalDefaultOptions14.container) != null ? _globalDefaultOptions13 : {};\n      var options = (_currentModal$options = currentModal == null ? void 0 : currentModal.options) != null ? _currentModal$options : {};\n      var Opts = function Opts(props) {\n        return _objectSpread(_objectSpread(_objectSpread({}, safeOpts(customDefaultOptions)(props)), safeOpts(defaultOptions)(props)), safeOpts(options)(props));\n      };\n      return React.createElement(Navigator.Screen, {\n        key: name,\n        name: name,\n        component: C,\n        options: Opts,\n        listeners: function listeners(_ref11) {\n          var route = _ref11.route;\n          return {\n            blur: function blur(e) {\n              return clearParams(route == null ? void 0 : route.name);\n            }\n          };\n        }\n      });\n    };\n    this.Root = function (_ref12) {\n      var parentRoot = _ref12.root;\n      var _this$layout5 = _this.layout,\n        stacks = _this$layout5.stacks,\n        tabs = _this$layout5.tabs,\n        modals = _this$layout5.modals,\n        drawers = _this$layout5.drawers,\n        root = _this$layout5.root;\n      var AppNavigator = createNativeStackNavigator();\n      var appRoot = _this.getSafeRoot(parentRoot != null ? parentRoot : root);\n      if (!appRoot) {\n        _this.log('No modal found');\n        return React.createElement(React.Fragment, null);\n      }\n      useEffect(function () {\n        if (!!appRoot) {\n          _this.__setRoot(appRoot);\n        }\n      }, [parentRoot]);\n      var AppStacks = useMemo(function () {\n        if (!stacks) return null;\n        var stacksKeys = Object.keys(stacks);\n        return stacksKeys.map(function (key) {\n          return _this.StackContainer({\n            Navigator: AppNavigator,\n            name: key,\n            definition: stacks[key]\n          });\n        });\n      }, [stacks]);\n      var AppTabs = useMemo(function () {\n        if (!tabs) return null;\n        var tabsKeys = Object.keys(tabs);\n        return tabsKeys.map(function (key) {\n          return _this.TabsContainer({\n            Navigator: AppNavigator,\n            name: key,\n            definition: key\n          });\n        });\n      }, [tabs]);\n      var AppDrawers = useMemo(function () {\n        if (!drawers) return null;\n        var drawersKeys = Object.keys(drawers);\n        return drawersKeys.map(function (key) {\n          return _this.DrawerContainer({\n            Navigator: AppNavigator,\n            name: key,\n            definition: key\n          });\n        });\n      }, [drawers]);\n      var AppModals = useMemo(function () {\n        if (!modals) return null;\n        var modalsKeys = Object.keys(modals);\n        return modalsKeys.map(function (key) {\n          return _this.ModalContainer({\n            Navigator: AppNavigator,\n            name: key,\n            definition: key\n          });\n        });\n      }, [modals]);\n      var AppRoot = useMemo(function () {\n        return React.createElement(AppNavigator.Navigator, {\n          initialRouteName: appRoot\n        }, React.createElement(AppNavigator.Group, null, AppStacks), React.createElement(AppNavigator.Group, null, AppTabs), React.createElement(AppNavigator.Group, null, AppDrawers), React.createElement(AppNavigator.Group, {\n          screenOptions: {\n            presentation: 'modal'\n          }\n        }, AppModals));\n      }, [appRoot]);\n      return AppRoot;\n    };\n    this.App = function (_ref13) {\n      var navigationContainerProps = _ref13.navigationContainerProps,\n        parentRoot = _ref13.root;\n      var _navContainerRef = function _navContainerRef(instance) {\n        _this.navRef.current = instance;\n      };\n      var _navContainerOnReady = function _navContainerOnReady() {\n        _this.navIsReadyRef.current = true;\n        if (navigationContainerProps != null && navigationContainerProps.onReady) {\n          navigationContainerProps == null ? void 0 : navigationContainerProps.onReady();\n        }\n      };\n      return React.createElement(NavigationContainer, _objectSpread(_objectSpread({}, navigationContainerProps), {}, {\n        ref: _navContainerRef,\n        onReady: _navContainerOnReady\n      }), React.createElement(_this.Root, {\n        root: parentRoot\n      }));\n    };\n    this.layout = data;\n    this.navRef = createNavigationContainerRef();\n    this.navIsReadyRef = React.createRef();\n    this.tunnel = new NavioTunnel();\n  }\n  return _createClass(Navio, [{\n    key: \"N\",\n    get: function get() {\n      return this.navRef;\n    }\n  }, {\n    key: \"navIsReady\",\n    get: function get() {\n      return !!this.navIsReadyRef && this.navIsReadyRef.current && !!this.navRef && !!this.navRef.current;\n    }\n  }, {\n    key: \"log\",\n    value: function log(message) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';\n      console[type](`[navio] ${message}`);\n    }\n  }, {\n    key: \"__setRoot\",\n    value: function __setRoot(routeName) {\n      var _this$layout6 = this.layout,\n        stacks = _this$layout6.stacks,\n        tabs = _this$layout6.tabs,\n        drawers = _this$layout6.drawers;\n      if (stacks && stacks[routeName]) {\n        this.stacks.setRoot(routeName);\n      }\n      if (tabs && tabs[routeName]) {\n        this.tabs.setRoot(routeName);\n      }\n      if (drawers && drawers[routeName]) {\n        this.drawers.setRoot(routeName);\n      }\n    }\n  }, {\n    key: \"getSafeRoot\",\n    value: function getSafeRoot(name) {\n      if (!name) return undefined;\n      var _this$layout7 = this.layout,\n        stacks = _this$layout7.stacks,\n        tabs = _this$layout7.tabs,\n        drawers = _this$layout7.drawers;\n      var split = name.split('.');\n      var type = split[0];\n      var routeName = split.slice(1).join(':');\n      if (type === 'tabs') {\n        var rName = routeName;\n        if (!!tabs && !tabs[rName]) {\n          this.log('Wrong app root', 'warn');\n        }\n        return rName;\n      }\n      if (type === 'stacks') {\n        var _rName = routeName;\n        if (!!stacks && !stacks[_rName]) {\n          this.log('Wrong app root', 'warn');\n        }\n        return _rName;\n      }\n      if (type === 'drawers') {\n        var _rName2 = routeName;\n        if (!!drawers && !drawers[_rName2]) {\n          this.log('Wrong app root', 'warn');\n        }\n        return _rName2;\n      }\n    }\n  }, {\n    key: \"getCustomDefaultOptions\",\n    value: function getCustomDefaultOptions() {\n      return {\n        stacks: {\n          container: {\n            headerShown: false\n          }\n        },\n        tabs: {\n          container: {\n            headerShown: false\n          },\n          screen: {\n            headerShown: false\n          }\n        },\n        drawers: {\n          container: {\n            headerShown: false\n          },\n          screen: {\n            headerShown: false\n          }\n        },\n        modals: {\n          container: {\n            headerShown: false\n          }\n        }\n      };\n    }\n  }, {\n    key: \"push\",\n    value: function push(name, params) {\n      if (this.navIsReady) {\n        var _this$navRef$current2;\n        (_this$navRef$current2 = this.navRef.current) == null ? void 0 : _this$navRef$current2.dispatch(StackActions.push(name, params));\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack() {\n      if (this.navIsReady) {\n        var _this$navRef$current3;\n        (_this$navRef$current3 = this.navRef.current) == null ? void 0 : _this$navRef$current3.goBack();\n      }\n    }\n  }, {\n    key: \"setParams\",\n    value: function setParams(name, params) {\n      if (this.navIsReady) {\n        var _this$navRef$current4;\n        (_this$navRef$current4 = this.navRef.current) == null ? void 0 : _this$navRef$current4.dispatch(_objectSpread(_objectSpread({}, CommonActions.setParams(params)), {}, {\n          source: name\n        }));\n      }\n    }\n  }, {\n    key: \"setRoot\",\n    value: function setRoot(as, routeName) {\n      if (as) {\n        this.__setRoot(routeName);\n      }\n    }\n  }, {\n    key: \"stacks\",\n    get: function get() {\n      var self = this;\n      return {\n        push: function push(name) {\n          if (self.navIsReady) {\n            self.navigate(name);\n          }\n        },\n        pop: function pop(count) {\n          if (self.navIsReady) {\n            var _self$navRef$current;\n            (_self$navRef$current = self.navRef.current) == null ? void 0 : _self$navRef$current.dispatch(StackActions.pop(count));\n          }\n        },\n        popToTop: function popToTop() {\n          if (self.navIsReady) {\n            var _self$navRef$current2;\n            (_self$navRef$current2 = self.navRef.current) == null ? void 0 : _self$navRef$current2.dispatch(StackActions.popToTop());\n          }\n        },\n        setRoot: function setRoot(name) {\n          if (self.navIsReady) {\n            var _self$navRef$current3;\n            (_self$navRef$current3 = self.navRef.current) == null ? void 0 : _self$navRef$current3.dispatch(CommonActions.reset({\n              routes: [{\n                name: name\n              }]\n            }));\n          }\n        }\n      };\n    }\n  }, {\n    key: \"tabs\",\n    get: function get() {\n      var self = this;\n      return {\n        jumpTo: function jumpTo(name) {\n          if (self.navIsReady) {\n            var _self$navRef$current4;\n            (_self$navRef$current4 = self.navRef.current) == null ? void 0 : _self$navRef$current4.dispatch(TabActions.jumpTo(name));\n          }\n        },\n        updateOptions: function updateOptions(name, options) {\n          if (self.navIsReady) {\n            self.tunnel.echo('tabs.updateOptions', {\n              name: name,\n              options: options\n            });\n          }\n        },\n        setRoot: function setRoot(name) {\n          if (self.navIsReady) {\n            var _self$navRef$current5;\n            (_self$navRef$current5 = self.navRef.current) == null ? void 0 : _self$navRef$current5.dispatch(CommonActions.reset({\n              routes: [{\n                name: name\n              }]\n            }));\n          }\n        }\n      };\n    }\n  }, {\n    key: \"modals\",\n    get: function get() {\n      var self = this;\n      return {\n        show: function show(name, params) {\n          if (self.navIsReady) {\n            if (!!params) {\n              self.__modalParams[name] = params;\n            }\n            self.navigate(name);\n          }\n        },\n        getParams: function getParams(name) {\n          return self.__modalParams[name];\n        }\n      };\n    }\n  }, {\n    key: \"drawers\",\n    get: function get() {\n      var self = this;\n      return {\n        open: function open() {\n          if (self.navIsReady) {\n            var _self$navRef$current6;\n            (_self$navRef$current6 = self.navRef.current) == null ? void 0 : _self$navRef$current6.dispatch(DrawerActions.openDrawer());\n          }\n        },\n        close: function close() {\n          if (self.navIsReady) {\n            var _self$navRef$current7;\n            (_self$navRef$current7 = self.navRef.current) == null ? void 0 : _self$navRef$current7.dispatch(DrawerActions.closeDrawer());\n          }\n        },\n        toggle: function toggle() {\n          if (self.navIsReady) {\n            var _self$navRef$current8;\n            (_self$navRef$current8 = self.navRef.current) == null ? void 0 : _self$navRef$current8.dispatch(DrawerActions.toggleDrawer());\n          }\n        },\n        jumpTo: function jumpTo(name) {\n          if (self.navIsReady) {\n            var _self$navRef$current9;\n            (_self$navRef$current9 = self.navRef.current) == null ? void 0 : _self$navRef$current9.dispatch(DrawerActions.jumpTo(name));\n          }\n        },\n        updateOptions: function updateOptions(name, options) {\n          if (self.navIsReady) {\n            self.tunnel.echo('drawer.updateOptions', {\n              name: name,\n              options: options\n            });\n          }\n        },\n        setRoot: function setRoot(name) {\n          if (self.navIsReady) {\n            var _self$navRef$current10;\n            (_self$navRef$current10 = self.navRef.current) == null ? void 0 : _self$navRef$current10.dispatch(CommonActions.reset({\n              routes: [{\n                name: name\n              }]\n            }));\n          }\n        }\n      };\n    }\n  }, {\n    key: \"useN\",\n    value: function useN() {\n      return useNavigation();\n    }\n  }, {\n    key: \"useR\",\n    value: function useR() {\n      return useRoute();\n    }\n  }, {\n    key: \"useParams\",\n    value: function useParams() {\n      var _useRoute;\n      return (_useRoute = useRoute()) == null ? void 0 : _useRoute.params;\n    }\n  }], [{\n    key: \"build\",\n    value: function build(data) {\n      var _navio = new Navio(data);\n      return _navio;\n    }\n  }]);\n}();","map":{"version":3,"names":["React","useEffect","useMemo","useState","createBottomTabNavigator","CommonActions","createNavigationContainerRef","DrawerActions","NavigationContainer","StackActions","TabActions","useNavigation","useRoute","createNativeStackNavigator","createDrawerNavigator","NavioTunnel","safeOpts","Navio","data","_this","_classCallCheck","__tabsUpdatedOptions","__drawerUpdatedOptions","__modalParams","navigate","name","params","navIsReady","_this$navRef$current","navRef","current","dispatch","__StackGetNavigatorProps","definition","_definition$navigator","_stacks$definition$na","stacks","layout","undefined","Array","isArray","navigatorProps","__StackGetContainerOpts","_definition$options","_stacks$definition$op","options","__StackGetScreens","_definition$screens","_stacks$definition$sc","screens","StackScreen","_ref","_this$getCustomDefaul","_this$getCustomDefaul2","_this$getCustomDefaul3","_globalDefaultOptions","_globalDefaultOptions2","StackNavigator","_this$layout","globalDefaultOptions","defaultOptions","screen","sComponent","sOptions","component","_screen$options","C","customDefaultOptions","getCustomDefaultOptions","Opts","props","_objectSpread","createElement","Screen","key","Stack","_ref2","_this$layout2","hooks","h","log","Fragment","StackScreensMemo","map","sk","Navigator","StackContainer","_ref3","_this$getCustomDefaul4","_this$getCustomDefaul5","_this$getCustomDefaul6","_globalDefaultOptions3","_globalDefaultOptions4","container","tabs","__TabsGet","currentTabs","TabScreen","_ref4","TabNavigator","stack","drawer","Drawer","Tabs","_ref5","_this$layout3","_useState","_useState2","_slicedToArray","updatedOptions","setUpdatedOptions","tunnel","on","tcname","tcopts","_defineProperty","currentTabsLayout","currentTabsLayoutKeys","Object","keys","TabScreensMemo","_props$route","_this$getCustomDefaul7","_this$getCustomDefaul8","_this$getCustomDefaul9","_globalDefaultOptions5","_globalDefaultOptions6","_currentTabs$navigato","_currentTabs$navigato2","_currentTabs$layout$r","_currentTabs$layout$r2","_updatedOptions$rName","rName","route","defaultOpts","navigatorScreenOptions","screenOptions","_updatedOptions","TabsContainer","_ref6","_this$getCustomDefaul10","_this$getCustomDefaul11","_this$getCustomDefaul12","_globalDefaultOptions7","_globalDefaultOptions8","_this$__TabsGet$optio","_this$__TabsGet","__DrawerGet","drawers","DrawerScreen","_ref7","DrawerNavigator","_ref8","_this$layout4","currentDrawer","_useState3","_useState4","opts","currentDrawerLayout","currentDrawerLayoutKeys","DrawerScreensMemo","_props$route2","_this$getCustomDefaul13","_this$getCustomDefaul14","_this$getCustomDefaul15","_globalDefaultOptions9","_globalDefaultOptions10","_currentDrawer$naviga","_currentDrawer$naviga2","_currentDrawer$layout","_currentDrawer$layout2","_updatedOptions$rName2","DrawerContainer","_ref9","_this$getCustomDefaul16","_this$getCustomDefaul17","_this$getCustomDefaul18","_globalDefaultOptions11","_globalDefaultOptions12","_this$__DrawerGet$opt","_this$__DrawerGet","__ModalGet","modals","currentModal","ModalContainer","_ref10","_this$getCustomDefaul19","_this$getCustomDefaul20","_this$getCustomDefaul21","_globalDefaultOptions13","_globalDefaultOptions14","_currentModal$options","clearParams","listeners","_ref11","blur","e","Root","_ref12","parentRoot","root","_this$layout5","AppNavigator","appRoot","getSafeRoot","__setRoot","AppStacks","stacksKeys","AppTabs","tabsKeys","AppDrawers","drawersKeys","AppModals","modalsKeys","AppRoot","initialRouteName","Group","presentation","App","_ref13","navigationContainerProps","_navContainerRef","instance","_navContainerOnReady","navIsReadyRef","onReady","ref","createRef","_createClass","get","value","message","type","arguments","length","console","routeName","_this$layout6","setRoot","_this$layout7","split","slice","join","headerShown","push","_this$navRef$current2","goBack","_this$navRef$current3","setParams","_this$navRef$current4","source","as","self","pop","count","_self$navRef$current","popToTop","_self$navRef$current2","_self$navRef$current3","reset","routes","jumpTo","_self$navRef$current4","updateOptions","echo","_self$navRef$current5","show","getParams","open","_self$navRef$current6","openDrawer","close","_self$navRef$current7","closeDrawer","toggle","_self$navRef$current8","toggleDrawer","_self$navRef$current9","_self$navRef$current10","useN","useR","useParams","_useRoute","build","_navio"],"sources":["/workspaces/expo-starter/node_modules/rn-navio/dist/navio.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { CommonActions, createNavigationContainerRef, DrawerActions, NavigationContainer, StackActions, TabActions, useNavigation, useRoute, } from '@react-navigation/native';\nimport { createNativeStackNavigator, } from '@react-navigation/native-stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { NavioTunnel } from './tunnel';\nimport { safeOpts } from './help';\n// Navio\nexport class Navio {\n    static build(data) {\n        const _navio = new Navio(data);\n        return _navio;\n    }\n    // ========\n    // | Vars |\n    // ========\n    layout;\n    // react navigation related\n    navRef;\n    navIsReadyRef;\n    // for data transfer\n    tunnel;\n    // updated options for tabs and drawers. used to store data during session\n    __tabsUpdatedOptions = {};\n    __drawerUpdatedOptions = {};\n    // params for modals. used to easier transfer data to modal\n    __modalParams = {};\n    // ========\n    // | Init |\n    // ========\n    constructor(data) {\n        // Layout\n        this.layout = data;\n        // Navigation\n        this.navRef = createNavigationContainerRef();\n        this.navIsReadyRef = React.createRef();\n        // Tunnel (event emitter)\n        this.tunnel = new NavioTunnel();\n    }\n    // ===========\n    // | Getters |\n    // ===========\n    get N() {\n        return this.navRef;\n    }\n    get navIsReady() {\n        return (!!this.navIsReadyRef && this.navIsReadyRef.current && !!this.navRef && !!this.navRef.current);\n    }\n    // ===========\n    // | Methods |\n    // ===========\n    log(message, type = 'log') {\n        console[type](`[navio] ${message}`);\n    }\n    __setRoot(routeName) {\n        const { stacks, tabs, drawers } = this.layout;\n        if (stacks && stacks[routeName]) {\n            this.stacks.setRoot(routeName);\n        }\n        if (tabs && tabs[routeName]) {\n            this.tabs.setRoot(routeName);\n        }\n        if (drawers && drawers[routeName]) {\n            this.drawers.setRoot(routeName);\n        }\n    }\n    getSafeRoot(name) {\n        if (!name)\n            return undefined;\n        const { stacks, tabs, drawers } = this.layout;\n        const split = name.split('.');\n        const type = split[0]; // tabs, stacks, drawers\n        const routeName = split.slice(1).join(':');\n        if (type === 'tabs') {\n            const rName = routeName;\n            if (!!tabs && !tabs[rName]) {\n                this.log('Wrong app root', 'warn');\n            }\n            return rName;\n        }\n        if (type === 'stacks') {\n            const rName = routeName;\n            if (!!stacks && !stacks[rName]) {\n                this.log('Wrong app root', 'warn');\n            }\n            return rName;\n        }\n        if (type === 'drawers') {\n            const rName = routeName;\n            if (!!drawers && !drawers[rName]) {\n                this.log('Wrong app root', 'warn');\n            }\n            return rName;\n        }\n    }\n    getCustomDefaultOptions() {\n        return {\n            stacks: {\n                container: {\n                    headerShown: false,\n                },\n            },\n            tabs: {\n                container: {\n                    headerShown: false,\n                },\n                screen: {\n                    headerShown: false,\n                },\n            },\n            drawers: {\n                container: {\n                    headerShown: false,\n                },\n                screen: {\n                    headerShown: false,\n                },\n            },\n            modals: {\n                container: {\n                    headerShown: false,\n                },\n            },\n        };\n    }\n    navigate = (name, params) => {\n        if (this.navIsReady) {\n            this.navRef.current?.dispatch(CommonActions.navigate({\n                name: name,\n                params,\n            }));\n        }\n    };\n    // ===========\n    // | Actions |\n    // ===========\n    /**\n     * `push(...)` action adds a route on top of the stack and navigates forward to it.\n     *\n     * @param name ScreenName\n     * @param params Params\n     */\n    push(name, params) {\n        if (this.navIsReady) {\n            this.navRef.current?.dispatch(StackActions.push(name, params));\n        }\n    }\n    /**\n     * `goBack()` action creator allows to go back to the previous route in history.\n     */\n    goBack() {\n        if (this.navIsReady) {\n            this.navRef.current?.goBack();\n        }\n    }\n    /**\n     * `setParams(...)` action allows to update params for a certain route.\n     *\n     * @param name all available navigation keys. Leave `undefined` if applying for the focused route.\n     * @param params object\n     */\n    setParams(name, params) {\n        if (this.navIsReady) {\n            this.navRef.current?.dispatch({\n                ...CommonActions.setParams(params),\n                source: name,\n            });\n        }\n    }\n    /**\n     * `setRoot(as, name)` action sets a new app root.\n     *\n     * Tips: It can be used to switch between Tabs, Drawers, and Stacks.\n     *\n     * @param as used to define the type of the app layout. Possible values: 'stacks' | 'tabs' | 'drawers'.\n     * @param name will be autocompleted based on `as` value and current layout configuration.\n     */\n    setRoot(as, routeName) {\n        if (as) {\n            this.__setRoot(routeName);\n        }\n    }\n    /**\n     * `stacks` contains navigation actions for stack-based navigators.\n     *\n     * Available methods:\n     *\n     * `push`, `pop`, `popToTop`, `setRoot`\n     *\n     */\n    get stacks() {\n        // local copy of current instance\n        const self = this;\n        return {\n            /**\n             * `push(...)` action adds a route on top of the stack and navigates forward to it.\n             *\n             * Tips: It will \"hide\" tabs.\n             *\n             * @param name StackName\n             */\n            push(name) {\n                if (self.navIsReady) {\n                    self.navigate(name);\n                }\n            },\n            /**\n             * `pop(...)` action takes you back to a previous screen in the stack.\n             *\n             * @param count number\n             */\n            pop(count) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(StackActions.pop(count));\n                }\n            },\n            /**\n             * `popToPop()` action takes you back to the first screen in the stack, dismissing all the others.\n             */\n            popToTop() {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(StackActions.popToTop());\n                }\n            },\n            /**\n             * `setRoot(...)` action sets a new app root from stacks.\n             *\n             * Tips: It can be used to switch between Auth and App stacks.\n             *\n             * @param name StackName\n             */\n            setRoot(name) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(CommonActions.reset({\n                        routes: [{ name }],\n                    }));\n                }\n            },\n        };\n    }\n    /**\n     * `tabs` contains navigation actions for tab-based navigators.\n     *\n     * Available methods:\n     *\n     * `jumpTo`, `setRoot`\n     *\n     */\n    get tabs() {\n        // local copy of current instance\n        const self = this;\n        return {\n            /**\n             * `jumpTo(...)` action can be used to jump to an existing route in the tab navigator.\n             *\n             * @param name TabName\n             */\n            jumpTo(name) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(TabActions.jumpTo(name));\n                }\n            },\n            /**\n             * `updateOptions(...)` action updates provided tab's options.\n             *\n             * Tips: It can be used to update badge count.\n             *\n             * @param name name of the tab\n             * @param options `BottomTabNavigationOptions` options for the tab.\n             */\n            updateOptions(name, options) {\n                if (self.navIsReady) {\n                    self.tunnel.echo('tabs.updateOptions', {\n                        name,\n                        options,\n                    });\n                }\n            },\n            /**\n             * `setRoot(...)` action sets a new app root from tabs.\n             *\n             * Tips: It can be used to switch between Auth and Tabs.\n             *\n             * @param name TabsName\n             */\n            setRoot(name) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(CommonActions.reset({\n                        routes: [{ name }],\n                    }));\n                }\n            },\n        };\n    }\n    /**\n     * `modals` contains navigation actions for modals.\n     *\n     * Available methods:\n     *\n     * `show`\n     *\n     */\n    get modals() {\n        // local copy of current instance\n        const self = this;\n        return {\n            /**\n             * `show(...)` action can be used to show an existing modal.\n             *\n             * @param name ModalName\n             */\n            show(name, params) {\n                if (self.navIsReady) {\n                    // adding params to modals params data\n                    if (!!params) {\n                        self.__modalParams[name] = params;\n                    }\n                    self.navigate(name);\n                }\n            },\n            /**\n             * `getParams(...)` action can be used to get params passed to the modal.\n             *\n             * @param name ModalName\n             */\n            getParams(name) {\n                return self.__modalParams[name];\n            },\n        };\n    }\n    /**\n     * `drawers` contains navigation actions for drawer-based navigators.\n     *\n     * Available methods:\n     *\n     * `open`, `close`, `toggle`, `jumpTo`, `setRoot`\n     *\n     */\n    get drawers() {\n        // local copy of current instance\n        const self = this;\n        return {\n            /**\n             * `open()` action can be used to open the drawer pane.\n             */\n            open() {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(DrawerActions.openDrawer());\n                }\n            },\n            /**\n             * `close()` action can be used to close the drawer pane.\n             */\n            close() {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(DrawerActions.closeDrawer());\n                }\n            },\n            /**\n             * `toggle()` action can be used to open the drawer pane if closed, or close if open.\n             */\n            toggle() {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(DrawerActions.toggleDrawer());\n                }\n            },\n            /**\n             * `jumpTo(...)` action can be used to jump to an existing route in the drawer navigator.\n             *\n             * @param name StacksName\n             */\n            jumpTo(name) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(DrawerActions.jumpTo(name));\n                }\n            },\n            /**\n             * `updateOptions(...)` action updates provided drawer's options.\n             *\n             * @param name name of the drawer layout\n             * @param options `DrawerNavigationOptions` options for the drawer.\n             */\n            updateOptions(name, options) {\n                if (self.navIsReady) {\n                    self.tunnel.echo('drawer.updateOptions', {\n                        name,\n                        options,\n                    });\n                }\n            },\n            /**\n             * `setRoot(...)` action sets a new app root from drawers.\n             *\n             * Tips: It can be used to switch between Auth and Drawers.\n             *\n             * @param name DrawersName\n             */\n            setRoot(name) {\n                if (self.navIsReady) {\n                    self.navRef.current?.dispatch(CommonActions.reset({\n                        routes: [{ name }],\n                    }));\n                }\n            },\n        };\n    }\n    // =========\n    // | Hooks |\n    // =========\n    /**\n     * `useN()` is the duplicate of `useNavigation()` hook from React Navigation.\n     *\n     */\n    useN() {\n        return useNavigation();\n    }\n    /**\n     * `useR()` is the duplicate of `useRoute()` hook from React Navigation.\n     *\n     */\n    useR() {\n        return useRoute();\n    }\n    /**\n     * `useParams()` is used to quickly extract params from the React Navigation route.\n     *\n     */\n    useParams() {\n        return useRoute()?.params;\n    }\n    // ===========\n    // | Layouts |\n    // ===========\n    // | Stacks |\n    // some getters for Stack\n    __StackGetNavigatorProps = (definition) => {\n        const { stacks } = this.layout;\n        if (stacks === undefined)\n            return {};\n        return Array.isArray(definition)\n            ? // if definition is ScreenName[]\n                {}\n            : // if stackDev is TStacksDataObj\n                typeof definition === 'object'\n                    ? definition.navigatorProps ?? {}\n                    : // if stackDev is StacksName -> look into stacks[...]\n                        typeof definition === 'string'\n                            ? // if stacks[name] is ScreenName[]\n                                Array.isArray(stacks[definition])\n                                    ? {}\n                                    : // if stacks[name] is TStacksDataObj\n                                        typeof stacks[definition] === 'object'\n                                            ? stacks[definition].navigatorProps ?? {}\n                                            : {}\n                            : {};\n    };\n    __StackGetContainerOpts = (definition) => {\n        const { stacks } = this.layout;\n        if (stacks === undefined)\n            return {};\n        return Array.isArray(definition)\n            ? // if definition is ScreenName[]\n                {}\n            : // if stackDev is TStacksDataObj\n                typeof definition === 'object'\n                    ? definition.options ?? {}\n                    : // if stackDev is StacksName -> look into stacks[...]\n                        typeof definition === 'string'\n                            ? // if stacks[name] is ScreenName[]\n                                Array.isArray(stacks[definition])\n                                    ? {}\n                                    : // if stacks[name] is TStacksDataObj\n                                        typeof stacks[definition] === 'object'\n                                            ? stacks[definition].options ?? {}\n                                            : {}\n                            : {};\n    };\n    __StackGetScreens = (definition) => {\n        const { stacks } = this.layout;\n        if (stacks === undefined)\n            return [];\n        return Array.isArray(definition)\n            ? // if definition is ScreenName[]\n                definition\n            : // if definition is TStacksDataObj\n                typeof definition === 'object'\n                    ? definition.screens ?? []\n                    : // if definition is StacksName -> look into stacks[...]\n                        typeof definition === 'string'\n                            ? // if stacks[name] is ScreenName[]\n                                Array.isArray(stacks[definition])\n                                    ? stacks[definition]\n                                    : // if stacks[name] is TStacksDataObj\n                                        typeof stacks[definition] === 'object'\n                                            ? stacks[definition].screens ?? []\n                                            : []\n                            : [];\n    };\n    StackScreen = ({ StackNavigator, name }) => {\n        const { screens, defaultOptions: globalDefaultOptions } = this.layout;\n        const screen = screens[name];\n        // component\n        // -- handling when screen is a component or object{component,options}\n        let sComponent;\n        let sOptions;\n        if (typeof screen === 'object') {\n            if (screen.component) {\n                // {component,options}\n                sComponent = screen.component;\n                sOptions = screen.options ?? {};\n            }\n            else {\n                // component\n                // this might happen if a screen is provided as wrapped component, for ex. const Main: React.FC = observer(() => {}); (observer from mobx)\n                sComponent = screen;\n                sOptions = {};\n            }\n        }\n        else {\n            // component\n            sComponent = screen;\n            sOptions = {};\n        }\n        const C = sComponent;\n        // options\n        const customDefaultOptions = this.getCustomDefaultOptions()?.stacks?.screen ?? {};\n        const defaultOptions = globalDefaultOptions?.stacks?.screen ?? {};\n        const Opts = props => ({\n            ...safeOpts(customDefaultOptions)(props),\n            ...safeOpts(defaultOptions)(props),\n            ...safeOpts(sOptions)(props),\n            ...safeOpts(C.options)(props), // component-based options\n        }); // must be function. merge options from buildNavio and from component itself. also providing default options\n        // screen\n        return React.createElement(StackNavigator.Screen, { key: name, name: name, component: C, options: Opts });\n    };\n    Stack = ({ definition }) => {\n        if (!definition)\n            return null;\n        const { screens, stacks, hooks } = this.layout;\n        // -- running hooks\n        if (hooks)\n            for (const h of hooks)\n                if (h)\n                    h();\n        if (!screens) {\n            this.log('No screens registered');\n            return React.createElement(React.Fragment, null);\n        }\n        if (!stacks) {\n            this.log('No stacks registered');\n            return React.createElement(React.Fragment, null);\n        }\n        // -- building navigator\n        const Stack = createNativeStackNavigator();\n        const StackScreensMemo = useMemo(() => {\n            return this.__StackGetScreens(definition).map(sk => this.StackScreen({ StackNavigator: Stack, name: sk }));\n        }, [definition, screens, stacks]);\n        // -- getting navigator props\n        const navigatorProps = this.__StackGetNavigatorProps(definition);\n        return React.createElement(Stack.Navigator, { ...navigatorProps }, StackScreensMemo);\n    };\n    StackContainer = ({ Navigator, definition, name }) => {\n        const { defaultOptions: globalDefaultOptions } = this.layout;\n        // component\n        const C = () => this.Stack({ definition });\n        // options\n        const customDefaultOptions = this.getCustomDefaultOptions()?.stacks?.container ?? {};\n        const defaultOptions = globalDefaultOptions?.tabs?.container ?? {};\n        const options = this.__StackGetContainerOpts(definition);\n        const Opts = props => ({\n            ...safeOpts(customDefaultOptions)(props),\n            ...safeOpts(defaultOptions)(props),\n            ...safeOpts(options)(props), // navio.stacks.[].options\n        }); // must be function. merge options from buildNavio. also providing default options\n        return (React.createElement(Navigator.Screen, { key: name, name: name, options: Opts }, (props) => React.createElement(C, { ...props })));\n    };\n    // | Tabs |\n    __TabsGet = (definition) => {\n        const { tabs } = this.layout;\n        if (tabs === undefined)\n            return undefined;\n        const currentTabs = typeof definition === 'string' ? tabs[definition] : undefined;\n        return currentTabs;\n    };\n    TabScreen = ({ TabNavigator, name, layout }) => {\n        if (!layout.stack && !layout.drawer) {\n            this.log(`Either 'stack' or 'drawer' must be provided for \"${name}\" tabs layout.`);\n            return null;\n        }\n        // component\n        const C = () => layout.stack\n            ? this.Stack({ definition: layout.stack })\n            : layout.drawer\n                ? this.Drawer({ definition: layout.drawer })\n                : null;\n        return React.createElement(TabNavigator.Screen, { key: name, name: name, component: C });\n    };\n    Tabs = ({ definition }) => {\n        const { tabs, hooks, defaultOptions: globalDefaultOptions } = this.layout;\n        // -- pre-checks\n        if (!tabs) {\n            this.log('No tabs registered');\n            return React.createElement(React.Fragment, null);\n        }\n        const currentTabs = this.__TabsGet(definition);\n        if (!currentTabs) {\n            this.log('No tabs defined found');\n            return React.createElement(React.Fragment, null);\n        }\n        // -- internal state\n        const [updatedOptions, setUpdatedOptions] = useState({});\n        // -- internal effects\n        useEffect(() => {\n            this.tunnel.on('tabs.updateOptions', (params) => {\n                const tcname = params.name;\n                const tcopts = params.options;\n                this.__tabsUpdatedOptions = {\n                    ...this.__tabsUpdatedOptions,\n                    [tcname]: { ...this.__tabsUpdatedOptions[tcname], ...tcopts },\n                };\n                setUpdatedOptions(this.__tabsUpdatedOptions);\n            });\n        }, [definition]);\n        // -- internal memos\n        const currentTabsLayout = useMemo(() => currentTabs.layout, [currentTabs]);\n        const currentTabsLayoutKeys = useMemo(() => Object.keys(currentTabsLayout), [currentTabsLayout]);\n        // -- running hooks\n        if (hooks)\n            for (const h of hooks)\n                if (h)\n                    h();\n        // -- building navigator\n        const Tabs = useMemo(() => createBottomTabNavigator(), [tabs]);\n        const TabScreensMemo = useMemo(() => currentTabsLayoutKeys.map(key => this.TabScreen({\n            name: key,\n            TabNavigator: Tabs,\n            layout: currentTabs.layout[key],\n        })), [Tabs, currentTabsLayoutKeys]);\n        // options\n        const Opts = props => {\n            const rName = props?.route?.name;\n            if (!rName)\n                return {};\n            const customDefaultOptions = this.getCustomDefaultOptions()?.tabs?.screen ?? {};\n            const defaultOpts = globalDefaultOptions?.tabs?.screen ?? {};\n            const navigatorScreenOptions = currentTabs?.navigatorProps?.screenOptions ?? {};\n            const options = currentTabs?.layout[rName]?.options ?? {};\n            const _updatedOptions = updatedOptions[rName] ?? {};\n            return {\n                ...safeOpts(customDefaultOptions)(props),\n                ...safeOpts(defaultOpts)(props),\n                ...safeOpts(navigatorScreenOptions)(props),\n                ...safeOpts(options)(props),\n                ...safeOpts(_updatedOptions)(props), // upddated options (navio.tabs.updateOptions())\n            };\n        }; // must be function. merge options from buildNavio. also providing default options\n        return (React.createElement(Tabs.Navigator, { ...currentTabs.navigatorProps, screenOptions: Opts }, TabScreensMemo));\n    };\n    TabsContainer = ({ Navigator, definition, name }) => {\n        const { defaultOptions: globalDefaultOptions } = this.layout;\n        // component\n        const C = () => this.Tabs({ definition });\n        // options\n        const customDefaultOptions = this.getCustomDefaultOptions()?.tabs?.container ?? {};\n        const defaultOptions = globalDefaultOptions?.tabs?.container ?? {};\n        const options = this.__TabsGet(definition)?.options ?? {};\n        const Opts = props => ({\n            ...safeOpts(customDefaultOptions)(props),\n            ...safeOpts(defaultOptions)(props),\n            ...safeOpts(options)(props), // navio.tabs.[].options\n        }); // must be function. merge options from buildNavio. also providing default options\n        return React.createElement(Navigator.Screen, { key: name, name: name, component: C, options: Opts });\n    };\n    // | Drawers |\n    __DrawerGet = (definition) => {\n        const { drawers } = this.layout;\n        if (drawers === undefined)\n            return undefined;\n        const current = typeof definition === 'string' ? drawers[definition] : undefined;\n        return current;\n    };\n    DrawerScreen = ({ DrawerNavigator, name, layout }) => {\n        if (!layout.stack && !layout.tabs) {\n            this.log(`Either 'stack' or 'tabs' must be provided for \"${name}\" drawer layout.`);\n            return null;\n        }\n        // component\n        const C = () => layout.stack\n            ? this.Stack({ definition: layout.stack })\n            : layout.tabs\n                ? this.Tabs({ definition: layout.tabs })\n                : null;\n        // screen\n        return React.createElement(DrawerNavigator.Screen, { key: name, name: name, component: C });\n    };\n    Drawer = ({ definition }) => {\n        const { drawers, defaultOptions: globalDefaultOptions, hooks } = this.layout;\n        if (!drawers) {\n            this.log('No drawers registered');\n            return React.createElement(React.Fragment, null);\n        }\n        const currentDrawer = this.__DrawerGet(definition);\n        if (!currentDrawer) {\n            this.log('No drawer found');\n            return React.createElement(React.Fragment, null);\n        }\n        // -- internal state\n        const [updatedOptions, setUpdatedOptions] = useState({});\n        // -- internal effects\n        useEffect(() => {\n            this.tunnel.on('drawer.updateOptions', (params) => {\n                const name = params.name;\n                const opts = params.options;\n                this.__drawerUpdatedOptions = {\n                    ...this.__drawerUpdatedOptions,\n                    [name]: { ...this.__drawerUpdatedOptions[name], ...opts },\n                };\n                setUpdatedOptions(this.__drawerUpdatedOptions);\n            });\n        }, [definition]);\n        // -- internal memos\n        const currentDrawerLayout = useMemo(() => currentDrawer.layout, [currentDrawer]);\n        const currentDrawerLayoutKeys = useMemo(() => Object.keys(currentDrawerLayout), [currentDrawerLayout]);\n        // -- running hooks\n        if (hooks)\n            for (const h of hooks)\n                if (h)\n                    h();\n        // -- building navigator\n        const Drawer = useMemo(() => createDrawerNavigator(), [drawers]);\n        const DrawerScreensMemo = useMemo(() => {\n            return currentDrawerLayoutKeys.map(key => this.DrawerScreen({\n                name: key,\n                DrawerNavigator: Drawer,\n                layout: currentDrawer.layout[key],\n            }));\n        }, [Drawer, currentDrawerLayoutKeys]);\n        // options\n        const Opts = props => {\n            const rName = props?.route?.name;\n            if (!rName)\n                return {};\n            const customDefaultOptions = this.getCustomDefaultOptions()?.drawers?.screen ?? {};\n            const defaultOptions = globalDefaultOptions?.drawers?.screen ?? {};\n            const navigatorScreenOptions = currentDrawer?.navigatorProps?.screenOptions ?? {};\n            const options = currentDrawer?.layout[rName]?.options ?? {};\n            const _updatedOptions = updatedOptions[rName] ?? {};\n            return {\n                ...safeOpts(customDefaultOptions)(props),\n                ...safeOpts(defaultOptions)(props),\n                ...safeOpts(navigatorScreenOptions)(props),\n                ...safeOpts(options)(props),\n                ...safeOpts(_updatedOptions)(props), // upddated options (navio.drawers.updateOptions())\n            };\n        }; // must be function. merge options from buildNavio. also providing default options\n        return (React.createElement(Drawer.Navigator, { ...currentDrawer.navigatorProps, screenOptions: Opts }, DrawerScreensMemo));\n    };\n    DrawerContainer = ({ Navigator, definition, name }) => {\n        const { defaultOptions: globalDefaultOptions } = this.layout;\n        // component\n        const C = () => this.Drawer({ definition });\n        // options\n        const customDefaultOptions = this.getCustomDefaultOptions()?.drawers?.container ?? {};\n        const defaultOptions = globalDefaultOptions?.drawers?.container ?? {};\n        const options = this.__DrawerGet(definition)?.options ?? {};\n        const Opts = props => ({\n            ...safeOpts(customDefaultOptions)(props),\n            ...safeOpts(defaultOptions)(props),\n            ...safeOpts(options)(props), // navio.stacks.[].options\n        }); // must be function. merge options from buildNavio. also providing default options\n        return React.createElement(Navigator.Screen, { key: name, name: name, component: C, options: Opts });\n    };\n    // | Modals |\n    __ModalGet = (definition) => {\n        const { modals } = this.layout;\n        if (modals === undefined)\n            return undefined;\n        const currentModal = typeof definition === 'string' ? modals[definition] : undefined;\n        return currentModal;\n    };\n    ModalContainer = ({ Navigator, definition, name }) => {\n        const { defaultOptions: globalDefaultOptions } = this.layout;\n        const currentModal = this.__ModalGet(definition);\n        if (!currentModal) {\n            this.log('No modal found');\n            return React.createElement(React.Fragment, null);\n        }\n        // methods\n        const clearParams = (name) => {\n            this.__modalParams[name] = undefined;\n        };\n        // component\n        const C = () => this.Stack({ definition: currentModal?.stack });\n        // options\n        const customDefaultOptions = this.getCustomDefaultOptions()?.modals?.container ?? {};\n        const defaultOptions = globalDefaultOptions?.modals?.container ?? {};\n        const options = currentModal?.options ?? {};\n        const Opts = props => ({\n            ...safeOpts(customDefaultOptions)(props),\n            ...safeOpts(defaultOptions)(props),\n            ...safeOpts(options)(props), // navio.modals.[].options\n        }); // must be function. merge options from buildNavio. also providing default options\n        return (React.createElement(Navigator.Screen, { key: name, name: name, component: C, options: Opts, \n            // we need to subscribe to Modals.Listeners.Blur to clear modals params\n            listeners: ({ route }) => ({\n                blur: e => clearParams(route?.name),\n            }) }));\n    };\n    /**\n     * Generates `<Root />` component for provided layout. Returns Stack Navigator.\n     */\n    Root = ({ root: parentRoot }) => {\n        const { stacks, tabs, modals, drawers, root } = this.layout;\n        const AppNavigator = createNativeStackNavigator();\n        const appRoot = this.getSafeRoot(parentRoot ?? root);\n        if (!appRoot) {\n            this.log('No modal found');\n            return React.createElement(React.Fragment, null);\n        }\n        // Effects\n        useEffect(() => {\n            // -- changing route if `root` was changed\n            if (!!appRoot) {\n                this.__setRoot(appRoot);\n            }\n            // listening to changes of parentRoot, but setting appRoot value\n        }, [parentRoot]);\n        // UI Methods\n        // -- app stacks\n        const AppStacks = useMemo(() => {\n            if (!stacks)\n                return null;\n            const stacksKeys = Object.keys(stacks);\n            return stacksKeys.map(key => this.StackContainer({ Navigator: AppNavigator, name: key, definition: stacks[key] }));\n        }, [stacks]);\n        // -- app tabs\n        const AppTabs = useMemo(() => {\n            if (!tabs)\n                return null;\n            const tabsKeys = Object.keys(tabs);\n            return tabsKeys.map(key => this.TabsContainer({ Navigator: AppNavigator, name: key, definition: key }));\n        }, [tabs]);\n        // -- app drawers\n        const AppDrawers = useMemo(() => {\n            if (!drawers)\n                return null;\n            const drawersKeys = Object.keys(drawers);\n            return drawersKeys.map(key => this.DrawerContainer({ Navigator: AppNavigator, name: key, definition: key }));\n        }, [drawers]);\n        // -- app modals\n        const AppModals = useMemo(() => {\n            if (!modals)\n                return null;\n            const modalsKeys = Object.keys(modals);\n            return modalsKeys.map(key => this.ModalContainer({ Navigator: AppNavigator, name: key, definition: key }));\n        }, [modals]);\n        // -- app root\n        const AppRoot = useMemo(() => {\n            return (React.createElement(AppNavigator.Navigator, { initialRouteName: appRoot },\n                React.createElement(AppNavigator.Group, null, AppStacks),\n                React.createElement(AppNavigator.Group, null, AppTabs),\n                React.createElement(AppNavigator.Group, null, AppDrawers),\n                React.createElement(AppNavigator.Group, { screenOptions: { presentation: 'modal' } }, AppModals)));\n        }, [appRoot]);\n        return AppRoot;\n    };\n    /**\n     * Generates your app's root component for provided layout.\n     * Can be used as `<AppProviders><navio.App /></AppProviders>`\n     */\n    App = ({ navigationContainerProps, root: parentRoot }) => {\n        // Navigation-related methods\n        const _navContainerRef = (instance) => {\n            this.navRef.current = instance;\n        };\n        const _navContainerOnReady = () => {\n            this.navIsReadyRef.current = true;\n            if (navigationContainerProps?.onReady) {\n                navigationContainerProps?.onReady();\n            }\n        };\n        return (React.createElement(NavigationContainer, { ...navigationContainerProps, ref: _navContainerRef, onReady: _navContainerOnReady },\n            React.createElement(this.Root, { root: parentRoot })));\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
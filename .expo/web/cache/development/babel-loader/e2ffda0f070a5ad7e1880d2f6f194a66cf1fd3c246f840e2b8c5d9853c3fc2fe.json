{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"expandableContent\", \"useDialog\", \"modalProps\", \"dialogProps\", \"showTopBar\", \"topBarProps\", \"renderCustomOverlay\", \"disabled\", \"onPress\", \"customValue\", \"testID\"];\nvar _jsxFileName = \"/workspaces/expo-starter/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\nimport { Colors } from \"../../style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ExpandableOverlay = function ExpandableOverlay(props, ref) {\n  var children = props.children,\n    expandableContent = props.expandableContent,\n    useDialog = props.useDialog,\n    modalProps = props.modalProps,\n    dialogProps = props.dialogProps,\n    showTopBar = props.showTopBar,\n    topBarProps = props.topBarProps,\n    renderCustomOverlay = props.renderCustomOverlay,\n    disabled = props.disabled,\n    onPress = props.onPress,\n    customValue = props.customValue,\n    testID = props.testID,\n    others = _objectWithoutProperties(props, _excluded);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    visible = _useState2[0],\n    setExpandableVisible = _useState2[1];\n  var openExpandable = useCallback(function () {\n    setExpandableVisible(true);\n    onPress == null ? void 0 : onPress(props);\n  }, [onPress, customValue]);\n  var closeExpandable = useCallback(function () {\n    setExpandableVisible(false);\n    useDialog ? dialogProps == null ? void 0 : dialogProps.onDismiss == null ? void 0 : dialogProps.onDismiss() : modalProps == null ? void 0 : modalProps.onDismiss == null ? void 0 : modalProps.onDismiss();\n  }, [useDialog, dialogProps == null ? void 0 : dialogProps.onDismiss, modalProps == null ? void 0 : modalProps.onDismiss]);\n  var toggleExpandable = useCallback(function () {\n    return visible ? closeExpandable() : openExpandable();\n  }, [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, function () {\n    return {\n      openExpandable: openExpandable,\n      closeExpandable: closeExpandable,\n      toggleExpandable: toggleExpandable\n    };\n  });\n  var renderModal = function renderModal() {\n    return _jsxDEV(Modal, _objectSpread(_objectSpread({\n      testID: `${testID}.overlay`,\n      overlayBackgroundColor: Colors.$backgroundDefault\n    }, modalProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: [showTopBar && _jsxDEV(Modal.TopBar, _objectSpread({\n        onDone: closeExpandable\n      }, topBarProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 24\n      }, _this), expandableContent]\n    }), void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, _this);\n  };\n  var renderDialog = function renderDialog() {\n    return _jsxDEV(Dialog, _objectSpread(_objectSpread({\n      testID: `${testID}.overlay`\n    }, dialogProps), {}, {\n      visible: visible,\n      onDismiss: closeExpandable,\n      children: expandableContent\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, _this);\n  };\n  var renderOverlay = function renderOverlay() {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible: visible,\n        openExpandable: openExpandable,\n        closeExpandable: closeExpandable,\n        toggleExpandable: toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return _jsxDEV(TouchableOpacity, _objectSpread(_objectSpread({}, others), {}, {\n    onPress: openExpandable,\n    disabled: disabled,\n    testID: testID,\n    children: [_jsxDEV(View, {\n      pointerEvents: \"none\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, _this), renderOverlay()]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, _this);\n};\nexport default forwardRef(ExpandableOverlay);","map":{"version":3,"names":["React","useCallback","useState","forwardRef","useImperativeHandle","TouchableOpacity","View","Modal","Dialog","Colors","jsxDEV","_jsxDEV","ExpandableOverlay","props","ref","children","expandableContent","useDialog","modalProps","dialogProps","showTopBar","topBarProps","renderCustomOverlay","disabled","onPress","customValue","testID","others","_objectWithoutProperties","_excluded","_useState","_useState2","_slicedToArray","visible","setExpandableVisible","openExpandable","closeExpandable","onDismiss","toggleExpandable","renderModal","_objectSpread","overlayBackgroundColor","$backgroundDefault","TopBar","onDone","fileName","_jsxFileName","lineNumber","columnNumber","_this","renderDialog","renderOverlay","pointerEvents"],"sources":["/workspaces/expo-starter/node_modules/react-native-ui-lib/src/incubator/expandableOverlay/index.js"],"sourcesContent":["import React, { useCallback, useState, forwardRef, useImperativeHandle } from 'react';\nimport TouchableOpacity from \"../../components/touchableOpacity\";\nimport View from \"../../components/view\";\nimport Modal from \"../../components/modal\";\nimport Dialog from \"../../components/dialog\";\nimport { Colors } from \"../../style\";\nconst ExpandableOverlay = (props, ref) => {\n  const {\n    children,\n    expandableContent,\n    useDialog,\n    modalProps,\n    dialogProps,\n    showTopBar,\n    topBarProps,\n    renderCustomOverlay,\n    disabled,\n    onPress,\n    customValue,\n    testID,\n    ...others\n  } = props;\n  const [visible, setExpandableVisible] = useState(false);\n  const openExpandable = useCallback(() => {\n    setExpandableVisible(true);\n    onPress?.(props);\n  }, [onPress, customValue]);\n  const closeExpandable = useCallback(() => {\n    setExpandableVisible(false);\n    useDialog ? dialogProps?.onDismiss?.() : modalProps?.onDismiss?.();\n  }, [useDialog, dialogProps?.onDismiss, modalProps?.onDismiss]);\n  const toggleExpandable = useCallback(() => visible ? closeExpandable() : openExpandable(), [visible, openExpandable, closeExpandable]);\n  useImperativeHandle(ref, () => ({\n    openExpandable,\n    closeExpandable,\n    toggleExpandable\n  }));\n  const renderModal = () => {\n    return <Modal testID={`${testID}.overlay`} overlayBackgroundColor={Colors.$backgroundDefault} {...modalProps} visible={visible} onDismiss={closeExpandable}>\n        {showTopBar && <Modal.TopBar onDone={closeExpandable} {...topBarProps} />}\n        {expandableContent}\n      </Modal>;\n  };\n  const renderDialog = () => {\n    return <Dialog testID={`${testID}.overlay`} {...dialogProps} visible={visible} onDismiss={closeExpandable}>\n        {expandableContent}\n      </Dialog>;\n  };\n  const renderOverlay = () => {\n    if (renderCustomOverlay) {\n      return renderCustomOverlay({\n        visible,\n        openExpandable,\n        closeExpandable,\n        toggleExpandable\n      });\n    } else {\n      return useDialog ? renderDialog() : renderModal();\n    }\n  };\n  return <TouchableOpacity {...others} onPress={openExpandable} disabled={disabled} testID={testID}>\n      <View pointerEvents=\"none\">{children}</View>\n      {renderOverlay()}\n    </TouchableOpacity>;\n};\nexport default forwardRef(ExpandableOverlay);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
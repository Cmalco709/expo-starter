{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/workspaces/expo-starter/App.tsx\",\n  _this = this;\nimport 'expo-dev-client';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport * as Linking from 'expo-linking';\nimport { StatusBar } from 'expo-status-bar';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { NavioApp } from \"./src/navio\";\nimport { configureDesignSystem, getNavigationTheme, getStatusBarBGColor, getStatusBarStyle } from \"./src/utils/designSystem\";\nimport { hydrateStores } from \"./src/stores\";\nimport { initServices } from \"./src/services\";\nimport { AppProvider } from \"./src/utils/providers\";\nimport { useAppearance } from \"./src/utils/hooks\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nLogBox.ignoreLogs(['Require', 'Found screens with the same name nested inside one another.']);\nexport default (function () {\n  useAppearance();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    ready = _useState2[0],\n    setReady = _useState2[1];\n  var onLaunch = useCallback(_asyncToGenerator(function* () {\n    yield SplashScreen.preventAutoHideAsync();\n    yield hydrateStores();\n    configureDesignSystem();\n    yield initServices();\n    setReady(true);\n    yield SplashScreen.hideAsync();\n  }), []);\n  useEffect(function () {\n    onLaunch();\n  }, [onLaunch]);\n  var NotReady = useMemo(function () {\n    return _jsxDEV(_Fragment, {}, void 0, false);\n  }, [ready]);\n  if (!ready) return NotReady;\n  return _jsxDEV(GestureHandlerRootView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxDEV(AppProvider, {\n      children: [_jsxDEV(StatusBar, {\n        style: getStatusBarStyle(),\n        backgroundColor: getStatusBarBGColor()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this), _jsxDEV(NavioApp, {\n        navigationContainerProps: {\n          theme: getNavigationTheme(),\n          linking: {\n            prefixes: [Linking.createURL('/')]\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, _this);\n});","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","LogBox","Linking","StatusBar","SplashScreen","GestureHandlerRootView","NavioApp","configureDesignSystem","getNavigationTheme","getStatusBarBGColor","getStatusBarStyle","hydrateStores","initServices","AppProvider","useAppearance","Fragment","_Fragment","jsxDEV","_jsxDEV","ignoreLogs","_useState","_useState2","_slicedToArray","ready","setReady","onLaunch","_asyncToGenerator","preventAutoHideAsync","hideAsync","NotReady","style","flex","children","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_this","navigationContainerProps","theme","linking","prefixes","createURL"],"sources":["/workspaces/expo-starter/App.tsx"],"sourcesContent":["import 'expo-dev-client';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {LogBox} from 'react-native';\n\nimport * as Linking from 'expo-linking';\nimport {StatusBar} from 'expo-status-bar';\nimport * as SplashScreen from 'expo-splash-screen';\nimport {GestureHandlerRootView} from 'react-native-gesture-handler';\n\nimport {NavioApp} from '@app/navio';\nimport {\n  configureDesignSystem,\n  getNavigationTheme,\n  getStatusBarBGColor,\n  getStatusBarStyle,\n} from '@app/utils/designSystem';\nimport {hydrateStores} from '@app/stores';\nimport {initServices} from '@app/services';\nimport {AppProvider} from '@app/utils/providers';\nimport {useAppearance} from '@app/utils/hooks';\n\nLogBox.ignoreLogs([\n  'Require',\n  'Found screens with the same name nested inside one another.', // for navio in some cases\n]);\n\nexport default (): JSX.Element => {\n  useAppearance();\n  const [ready, setReady] = useState(false);\n\n  // `onLaunch` performs actions that have to be done on app launch before displaying app UI.\n  // If you need to make some api requests, load remote config, or some other \"heavy\" actions, you can use `@app/services/onLaunch.tsx`.\n  const onLaunch = useCallback(async () => {\n    await SplashScreen.preventAutoHideAsync();\n\n    await hydrateStores();\n    configureDesignSystem();\n    await initServices();\n\n    setReady(true);\n    await SplashScreen.hideAsync();\n  }, []);\n\n  useEffect(() => {\n    onLaunch();\n  }, [onLaunch]);\n\n  const NotReady = useMemo(() => {\n    // [Tip]\n    // You can show loading state here.\n    return <></>;\n  }, [ready]);\n\n  if (!ready) return NotReady;\n  return (\n    <GestureHandlerRootView style={{flex: 1}}>\n      <AppProvider>\n        <StatusBar style={getStatusBarStyle()} backgroundColor={getStatusBarBGColor()} />\n        <NavioApp\n          navigationContainerProps={{\n            theme: getNavigationTheme(),\n            linking: {\n              prefixes: [Linking.createURL('/')],\n            },\n          }}\n\n          // [Tip]\n          // You can use `root` to change the root of the app depending on global state changes.\n          // root={isLoggedIn ? 'AuthStack' : 'AppTabs'}\n        />\n      </AppProvider>\n    </GestureHandlerRootView>\n  );\n};\n"],"mappings":";;;;AAAA,OAAO,iBAAiB;AACxB,OAAOA,KAAK,IAAGC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAO,OAAO;AAAC,OAAAC,MAAA;AAGvE,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAAQC,SAAS,QAAO,iBAAiB;AACzC,OAAO,KAAKC,YAAY,MAAM,oBAAoB;AAClD,SAAQC,sBAAsB,QAAO,8BAA8B;AAEnE,SAAQC,QAAQ;AAChB,SACEC,qBAAqB,EACrBC,kBAAkB,EAClBC,mBAAmB,EACnBC,iBAAiB;AAEnB,SAAQC,aAAa;AACrB,SAAQC,YAAY;AACpB,SAAQC,WAAW;AACnB,SAAQC,aAAa;AAA0B,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE/CjB,MAAM,CAACkB,UAAU,CAAC,CAChB,SAAS,EACT,6DAA6D,CAC9D,CAAC;AAEF,gBAAe,YAAmB;EAChCL,aAAa,CAAC,CAAC;EACf,IAAAM,SAAA,GAA0BpB,QAAQ,CAAC,KAAK,CAAC;IAAAqB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAlCG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAItB,IAAMI,QAAQ,GAAG5B,WAAW,CAAA6B,iBAAA,CAAC,aAAY;IACvC,MAAMtB,YAAY,CAACuB,oBAAoB,CAAC,CAAC;IAEzC,MAAMhB,aAAa,CAAC,CAAC;IACrBJ,qBAAqB,CAAC,CAAC;IACvB,MAAMK,YAAY,CAAC,CAAC;IAEpBY,QAAQ,CAAC,IAAI,CAAC;IACd,MAAMpB,YAAY,CAACwB,SAAS,CAAC,CAAC;EAChC,CAAC,GAAE,EAAE,CAAC;EAEN9B,SAAS,CAAC,YAAM;IACd2B,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,IAAMI,QAAQ,GAAG9B,OAAO,CAAC,YAAM;IAG7B,OAAOmB,OAAA,CAAAF,SAAA,mBAAI,CAAC;EACd,CAAC,EAAE,CAACO,KAAK,CAAC,CAAC;EAEX,IAAI,CAACA,KAAK,EAAE,OAAOM,QAAQ;EAC3B,OACEX,OAAA,CAACb,sBAAsB;IAACyB,KAAK,EAAE;MAACC,IAAI,EAAE;IAAC,CAAE;IAAAC,QAAA,EACvCd,OAAA,CAACL,WAAW;MAAAmB,QAAA,GACVd,OAAA,CAACf,SAAS;QAAC2B,KAAK,EAAEpB,iBAAiB,CAAC,CAAE;QAACuB,eAAe,EAAExB,mBAAmB,CAAC;MAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAAE,CAAC,EACjFpB,OAAA,CAACZ,QAAQ;QACPiC,wBAAwB,EAAE;UACxBC,KAAK,EAAEhC,kBAAkB,CAAC,CAAC;UAC3BiC,OAAO,EAAE;YACPC,QAAQ,EAAE,CAACxC,OAAO,CAACyC,SAAS,CAAC,GAAG,CAAC;UACnC;QACF;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,GAAAC,KAKH,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KACS;EAAC;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACQ,CAAC;AAE7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
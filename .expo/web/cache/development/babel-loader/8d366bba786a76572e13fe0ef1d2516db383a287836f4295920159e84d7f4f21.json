{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/workspaces/expo-starter/node_modules/react-native-ui-lib/src/components/gridView/index.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport _map from \"lodash/map\";\nimport _size from \"lodash/size\";\nimport _get from \"lodash/get\";\nimport _first from \"lodash/first\";\nimport _flow from \"lodash/flow\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Spacings } from \"../../style\";\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar DEFAULT_NUM_COLUMNS = 3;\nvar DEFAULT_ITEM_SPACINGS = Spacings.s4;\nvar GridView = function (_UIComponent) {\n  function GridView() {\n    var _this;\n    _classCallCheck(this, GridView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, GridView, [].concat(args));\n    _this.state = {\n      viewWidth: _this.getGridContainerWidth(),\n      numColumns: _this.calcNumberOfColumns(),\n      itemSize: _this.calcItemSize()\n    };\n    _this.onOrientationChanged = function () {\n      var keepItemSize = _this.props.keepItemSize;\n      var itemSize = _this.state.itemSize;\n      if (!_this.props.viewWidth) {\n        var newItemSize = keepItemSize ? itemSize : _this.calcItemSize();\n        _this.setState({\n          viewWidth: Math.floor(_this.getDefaultViewWidth()),\n          numColumns: _this.calcNumberOfColumns(),\n          itemSize: newItemSize\n        });\n      }\n    };\n    _this.renderItem = function (item, index) {\n      var _item$itemSize;\n      var itemSize = _this.state.itemSize;\n      var _this$props = _this.props,\n        items = _this$props.items,\n        itemSpacing = _this$props.itemSpacing,\n        renderCustomItem = _this$props.renderCustomItem;\n      var _this$state$numColumn = _this.state.numColumns,\n        numColumns = _this$state$numColumn === void 0 ? DEFAULT_NUM_COLUMNS : _this$state$numColumn;\n      var itemsCount = _size(items);\n      var rowCount = Math.ceil(itemsCount / numColumns);\n      var isLastItemInRow = (index + 1) % numColumns === 0;\n      var isLastRow = index + 1 > (rowCount - 1) * numColumns;\n      var isLastItem = index === itemsCount - 1;\n      var size = typeof item.itemSize === 'object' ? {\n        width: itemSize,\n        height: ((_item$itemSize = item.itemSize) == null ? void 0 : _item$itemSize.height) || itemSize\n      } : itemSize;\n      var itemProps = _objectSpread(_objectSpread({\n        key: index\n      }, item), {}, {\n        itemSize: size,\n        containerStyle: [!isLastItemInRow && {\n          marginRight: itemSpacing\n        }, !isLastRow && {\n          marginBottom: itemSpacing\n        }, item.containerStyle],\n        children: isLastItem ? _this.renderLastItemOverlay() : undefined\n      });\n      return renderCustomItem ? renderCustomItem(itemProps) : _jsxDEV(GridListItem, _objectSpread({}, itemProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 61\n      }, _this);\n    };\n    return _this;\n  }\n  _inherits(GridView, _UIComponent);\n  return _createClass(GridView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n    }\n  }, {\n    key: \"getDefaultViewWidth\",\n    value: function getDefaultViewWidth() {\n      return Constants.screenWidth - Spacings.s5 * 2;\n    }\n  }, {\n    key: \"getGridContainerWidth\",\n    value: function getGridContainerWidth() {\n      return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n    }\n  }, {\n    key: \"calcNumberOfColumns\",\n    value: function calcNumberOfColumns() {\n      var _this$props2 = this.props,\n        numColumns = _this$props2.numColumns,\n        _this$props2$itemSpac = _this$props2.itemSpacing,\n        itemSpacing = _this$props2$itemSpac === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props2$itemSpac,\n        maxItemWidth = _this$props2.maxItemWidth;\n      var containerWidth = this.getGridContainerWidth();\n      if (maxItemWidth) {\n        return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n      } else {\n        return numColumns || DEFAULT_NUM_COLUMNS;\n      }\n    }\n  }, {\n    key: \"calcItemSize\",\n    value: function calcItemSize() {\n      var _this$props$itemSpaci = this.props.itemSpacing,\n        itemSpacing = _this$props$itemSpaci === void 0 ? DEFAULT_ITEM_SPACINGS : _this$props$itemSpaci;\n      var containerWidth = this.getGridContainerWidth();\n      var numColumns = this.calcNumberOfColumns();\n      return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n    }\n  }, {\n    key: \"renderLastItemOverlay\",\n    value: function renderLastItemOverlay() {\n      var _this$props3 = this.props,\n        lastItemLabel = _this$props3.lastItemLabel,\n        items = _this$props3.items,\n        lastItemOverlayColor = _this$props3.lastItemOverlayColor;\n      var formattedLabel = formatLastItemLabel(lastItemLabel, {\n        shouldAddPlus: true\n      });\n      if (!lastItemLabel) {\n        return;\n      }\n      var imageBorderRadius = _flow(_first, function (item) {\n        return _get(item, 'imageProps.borderRadius');\n      })(items);\n      return _jsxDEV(View, {\n        style: [styles.overlayContainer, {\n          backgroundColor: lastItemOverlayColor,\n          borderRadius: imageBorderRadius\n        }],\n        children: _jsxDEV(Text, {\n          mainBold: true,\n          white: true,\n          children: formattedLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 12\n      }, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var itemSize = this.state.itemSize;\n      var _this$props4 = this.props,\n        items = _this$props4.items,\n        viewWidth = _this$props4.viewWidth;\n      return _jsxDEV(View, {\n        style: [styles.container, {\n          width: viewWidth ? Math.floor(viewWidth) : undefined\n        }],\n        children: itemSize && _map(items, this.renderItem)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 12\n      }, this);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var viewWidth;\n      var numColumns;\n      if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n        viewWidth = Math.floor(nextProps.viewWidth);\n      }\n      if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n        numColumns = nextProps.numColumns;\n      }\n      if (viewWidth || viewWidth) {\n        return {\n          viewWidth: viewWidth,\n          numColumns: numColumns\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n}(UIComponent);\nGridView.displayName = 'GridView';\nGridView.defaultProps = {\n  numColumns: DEFAULT_NUM_COLUMNS,\n  itemSpacing: DEFAULT_ITEM_SPACINGS\n};\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center',\n    justifyContent: 'center'\n  })\n});\nexport default GridView;","map":{"version":3,"names":["_map","_size","_get","_first","_flow","React","StyleSheet","Spacings","UIComponent","View","Text","Constants","GridListItem","formatLastItemLabel","jsxDEV","_jsxDEV","DEFAULT_NUM_COLUMNS","DEFAULT_ITEM_SPACINGS","s4","GridView","_UIComponent","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","viewWidth","getGridContainerWidth","numColumns","calcNumberOfColumns","itemSize","calcItemSize","onOrientationChanged","keepItemSize","props","newItemSize","setState","Math","floor","getDefaultViewWidth","renderItem","item","index","_item$itemSize","_this$props","items","itemSpacing","renderCustomItem","_this$state$numColumn","itemsCount","rowCount","ceil","isLastItemInRow","isLastRow","isLastItem","size","width","height","itemProps","_objectSpread","key","containerStyle","marginRight","marginBottom","children","renderLastItemOverlay","undefined","fileName","_jsxFileName","lineNumber","columnNumber","_inherits","_createClass","value","componentDidMount","dimensionsChangeListener","addDimensionsEventListener","componentWillUnmount","removeDimensionsEventListener","screenWidth","s5","_this$props2","_this$props2$itemSpac","maxItemWidth","containerWidth","_this$props$itemSpaci","_this$props3","lastItemLabel","lastItemOverlayColor","formattedLabel","shouldAddPlus","imageBorderRadius","style","styles","overlayContainer","backgroundColor","borderRadius","mainBold","white","render","_this$props4","container","getDerivedStateFromProps","nextProps","prevState","displayName","defaultProps","create","flexDirection","flexWrap","absoluteFillObject","alignItems","justifyContent"],"sources":["/workspaces/expo-starter/node_modules/react-native-ui-lib/src/components/gridView/index.js"],"sourcesContent":["import _map from \"lodash/map\";\nimport _size from \"lodash/size\";\nimport _get from \"lodash/get\";\nimport _first from \"lodash/first\";\nimport _flow from \"lodash/flow\";\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Spacings } from \"../../style\";\n// TODO: we should use asBaseComponent here instead of using UIComponent directly\nimport UIComponent from \"../../commons/UIComponent\";\nimport View from \"../view\";\nimport Text from \"../text\";\nimport { Constants } from \"../../commons/new\";\nimport GridListItem from \"../gridListItem\";\nimport { formatLastItemLabel } from \"../../helpers/FormattingPresenter\";\nconst DEFAULT_NUM_COLUMNS = 3;\nconst DEFAULT_ITEM_SPACINGS = Spacings.s4;\n/**\n * @description: A auto-generated grid view that calculate item size according to given props\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/GridViewScreen.tsx\n */\nclass GridView extends UIComponent {\n  static displayName = 'GridView';\n  static defaultProps = {\n    numColumns: DEFAULT_NUM_COLUMNS,\n    itemSpacing: DEFAULT_ITEM_SPACINGS\n  };\n  state = {\n    viewWidth: this.getGridContainerWidth(),\n    numColumns: this.calcNumberOfColumns(),\n    itemSize: this.calcItemSize()\n  };\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let viewWidth;\n    let numColumns;\n    if (nextProps.viewWidth && Math.floor(nextProps.viewWidth) !== prevState.viewWidth) {\n      viewWidth = Math.floor(nextProps.viewWidth);\n    }\n    if (!nextProps.keepItemSize && nextProps.numColumns !== prevState.numColumns) {\n      numColumns = nextProps.numColumns;\n    }\n    if (viewWidth || viewWidth) {\n      return {\n        viewWidth,\n        numColumns\n      };\n    } else {\n      return null;\n    }\n  }\n  componentDidMount() {\n    this.dimensionsChangeListener = Constants.addDimensionsEventListener(this.onOrientationChanged);\n  }\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.dimensionsChangeListener || this.onOrientationChanged);\n  }\n  onOrientationChanged = () => {\n    const {\n      keepItemSize\n    } = this.props;\n    const {\n      itemSize\n    } = this.state;\n    if (!this.props.viewWidth) {\n      const newItemSize = keepItemSize ? itemSize : this.calcItemSize();\n      this.setState({\n        viewWidth: Math.floor(this.getDefaultViewWidth()),\n        numColumns: this.calcNumberOfColumns(),\n        itemSize: newItemSize\n      });\n    }\n  };\n  getDefaultViewWidth() {\n    return Constants.screenWidth - Spacings.s5 * 2;\n  }\n  getGridContainerWidth() {\n    return Math.floor(this.props.viewWidth || this.getDefaultViewWidth());\n  }\n  calcNumberOfColumns() {\n    const {\n      numColumns,\n      itemSpacing = DEFAULT_ITEM_SPACINGS,\n      maxItemWidth\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    if (maxItemWidth) {\n      return Math.ceil((containerWidth + itemSpacing) / (maxItemWidth + itemSpacing));\n    } else {\n      return numColumns || DEFAULT_NUM_COLUMNS;\n    }\n  }\n  calcItemSize() {\n    const {\n      itemSpacing = DEFAULT_ITEM_SPACINGS\n    } = this.props;\n    const containerWidth = this.getGridContainerWidth();\n    const numColumns = this.calcNumberOfColumns();\n    return (containerWidth - itemSpacing * (numColumns - 1)) / numColumns;\n  }\n  renderLastItemOverlay() {\n    const {\n      lastItemLabel,\n      items,\n      lastItemOverlayColor\n    } = this.props;\n    const formattedLabel = formatLastItemLabel(lastItemLabel, {\n      shouldAddPlus: true\n    });\n    if (!lastItemLabel) {\n      return;\n    }\n    const imageBorderRadius = _flow(_first, item => _get(item, 'imageProps.borderRadius'))(items);\n    return <View style={[styles.overlayContainer, {\n      backgroundColor: lastItemOverlayColor,\n      borderRadius: imageBorderRadius\n    }]}>\n        <Text mainBold white>\n          {formattedLabel}\n        </Text>\n      </View>;\n  }\n  renderItem = (item, index) => {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      itemSpacing,\n      renderCustomItem\n    } = this.props;\n    const {\n      numColumns = DEFAULT_NUM_COLUMNS\n    } = this.state;\n    const itemsCount = _size(items);\n    const rowCount = Math.ceil(itemsCount / numColumns);\n    const isLastItemInRow = (index + 1) % numColumns === 0;\n    const isLastRow = index + 1 > (rowCount - 1) * numColumns;\n    const isLastItem = index === itemsCount - 1;\n    const size = typeof item.itemSize === 'object' ? {\n      width: itemSize,\n      height: item.itemSize?.height || itemSize\n    } : itemSize;\n    const itemProps = {\n      key: index,\n      ...item,\n      itemSize: size,\n      containerStyle: [!isLastItemInRow && {\n        marginRight: itemSpacing\n      }, !isLastRow && {\n        marginBottom: itemSpacing\n      }, item.containerStyle],\n      children: isLastItem ? this.renderLastItemOverlay() : undefined\n    };\n    return renderCustomItem ? renderCustomItem(itemProps) : <GridListItem {...itemProps} />;\n  };\n  render() {\n    const {\n      itemSize\n    } = this.state;\n    const {\n      items,\n      viewWidth\n    } = this.props;\n    return <View style={[styles.container, {\n      width: viewWidth ? Math.floor(viewWidth) : undefined\n    }]}>\n        {itemSize && _map(items, this.renderItem)}\n      </View>;\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    width: '100%',\n    flexWrap: 'wrap'\n  },\n  overlayContainer: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default GridView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/workspaces/expo-starter/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardTracking/KeyboardAwareInsetsView.js\",\n  _this = this;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport KeyboardTrackingView from \"./KeyboardTrackingView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar KeyboardAwareInsetsView = function KeyboardAwareInsetsView(props) {\n  return _jsxDEV(KeyboardTrackingView, _objectSpread(_objectSpread({}, props), {}, {\n    pointerEvents: 'none',\n    style: styles.insetsView,\n    scrollToFocusedInput: true\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 42\n  }, _this);\n};\nvar ScreenSize = Dimensions.get('window');\nvar styles = StyleSheet.create({\n  insetsView: {\n    width: ScreenSize.width,\n    height: 0.5,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'transparent'\n  }\n});\nKeyboardAwareInsetsView.displayName = 'KeyboardAwareInsetsView';\nexport default KeyboardAwareInsetsView;","map":{"version":3,"names":["React","StyleSheet","Dimensions","KeyboardTrackingView","jsxDEV","_jsxDEV","KeyboardAwareInsetsView","props","_objectSpread","pointerEvents","style","styles","insetsView","scrollToFocusedInput","fileName","_jsxFileName","lineNumber","columnNumber","_this","ScreenSize","get","create","width","height","position","bottom","left","backgroundColor","displayName"],"sources":["/workspaces/expo-starter/node_modules/react-native-ui-lib/lib/components/Keyboard/KeyboardTracking/KeyboardAwareInsetsView.js"],"sourcesContent":["import React from 'react';\nimport { StyleSheet, Dimensions } from 'react-native';\nimport KeyboardTrackingView from \"./KeyboardTrackingView\";\n\n/**\n * @description: Used to add an inset when a keyboard is used and might hide part of the screen.\n *\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen/InputsScreen.js\n * @notes: This view is useful only for iOS.\n */\nconst KeyboardAwareInsetsView = props => <KeyboardTrackingView {...props} pointerEvents={'none'} style={styles.insetsView} scrollToFocusedInput />;\nconst ScreenSize = Dimensions.get('window');\nconst styles = StyleSheet.create({\n  insetsView: {\n    width: ScreenSize.width,\n    height: 0.5,\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    backgroundColor: 'transparent'\n  }\n});\nKeyboardAwareInsetsView.displayName = 'KeyboardAwareInsetsView';\nexport default KeyboardAwareInsetsView;"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,UAAA;AAAA,OAAAC,UAAA;AAE1B,OAAOC,oBAAoB;AAA+B,SAAAC,MAAA,IAAAC,OAAA;AAQ1D,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAGC,KAAK;EAAA,OAAIF,OAAA,CAACF,oBAAoB,EAAAK,aAAA,CAAAA,aAAA,KAAKD,KAAK;IAAEE,aAAa,EAAE,MAAO;IAACC,KAAK,EAAEC,MAAM,CAACC,UAAW;IAACC,oBAAoB;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KAAE,CAAC;AAAA;AAClJ,IAAMC,UAAU,GAAGjB,UAAU,CAACkB,GAAG,CAAC,QAAQ,CAAC;AAC3C,IAAMT,MAAM,GAAGV,UAAU,CAACoB,MAAM,CAAC;EAC/BT,UAAU,EAAE;IACVU,KAAK,EAAEH,UAAU,CAACG,KAAK;IACvBC,MAAM,EAAE,GAAG;IACXC,QAAQ,EAAE,UAAU;IACpBC,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AACFrB,uBAAuB,CAACsB,WAAW,GAAG,yBAAyB;AAC/D,eAAetB,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/workspaces/expo-starter/App.tsx\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState, useRef, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SQUARE_SIZE = 60;\nvar TARGET_SIZE = 100;\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nexport default function App() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    score = _useState2[0],\n    setScore = _useState2[1];\n  var _useState3 = useState('red'),\n    _useState4 = _slicedToArray(_useState3, 2),\n    color = _useState4[0],\n    setColor = _useState4[1];\n  var pan = useRef(new Animated.ValueXY({\n    x: 0,\n    y: 0\n  })).current;\n  var spawnNewSquare = function spawnNewSquare() {\n    var side = Math.floor(Math.random() * 4);\n    var startX = 0,\n      startY = 0;\n    switch (side) {\n      case 0:\n        startX = Math.random() * (width - SQUARE_SIZE);\n        startY = 0;\n        break;\n      case 1:\n        startX = width - SQUARE_SIZE;\n        startY = Math.random() * (height - SQUARE_SIZE);\n        break;\n      case 2:\n        startX = Math.random() * (width - SQUARE_SIZE);\n        startY = height - SQUARE_SIZE;\n        break;\n      case 3:\n        startX = 0;\n        startY = Math.random() * (height - SQUARE_SIZE);\n        break;\n    }\n    var colors = ['red', 'blue', 'green', 'purple', 'orange'];\n    var newColor = colors[Math.floor(Math.random() * colors.length)];\n    setColor(newColor);\n    pan.setValue({\n      x: startX,\n      y: startY\n    });\n  };\n  useEffect(function () {\n    spawnNewSquare();\n  }, []);\n  var isOverTarget = function isOverTarget() {\n    var squareX = pan.x.__getValue();\n    var squareY = pan.y.__getValue();\n    var targetX = width / 2 - TARGET_SIZE / 2;\n    var targetY = height / 2 - TARGET_SIZE / 2;\n    return squareX < targetX + TARGET_SIZE && squareX + SQUARE_SIZE > targetX && squareY < targetY + TARGET_SIZE && squareY + SQUARE_SIZE > targetY;\n  };\n  var panResponder = useRef(PanResponder.create({\n    onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n      return true;\n    },\n    onPanResponderGrant: function onPanResponderGrant() {\n      pan.setOffset({\n        x: pan.x.__getValue(),\n        y: pan.y.__getValue()\n      });\n      pan.setValue({\n        x: 0,\n        y: 0\n      });\n    },\n    onPanResponderMove: Animated.event([null, {\n      dx: pan.x,\n      dy: pan.y\n    }], {\n      useNativeDriver: false\n    }),\n    onPanResponderRelease: function onPanResponderRelease() {\n      pan.flattenOffset();\n      if (isOverTarget()) {\n        setScore(function (prev) {\n          return prev + 1;\n        });\n        spawnNewSquare();\n      }\n    }\n  })).current;\n  return _jsxDEV(SafeAreaView, {\n    style: styles.container,\n    children: _jsxDEV(View, {\n      style: styles.gameContainer,\n      children: [_jsxDEV(Text, {\n        style: styles.scoreText,\n        children: [\"Score: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), _jsxDEV(View, {\n        style: styles.targetSquare\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), _jsxDEV(Animated.View, _objectSpread({\n        style: [styles.draggableSquare, {\n          backgroundColor: color,\n          transform: [{\n            translateX: pan.x\n          }, {\n            translateY: pan.y\n          }]\n        }]\n      }, panResponder.panHandlers), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        style: styles.instructions,\n        children: \"Drag the colored square to the gray target\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  gameContainer: {\n    flex: 1,\n    position: 'relative'\n  },\n  targetSquare: {\n    position: 'absolute',\n    width: TARGET_SIZE,\n    height: TARGET_SIZE,\n    backgroundColor: 'gray',\n    left: width / 2 - TARGET_SIZE / 2,\n    top: height / 2 - TARGET_SIZE / 2\n  },\n  draggableSquare: {\n    position: 'absolute',\n    width: SQUARE_SIZE,\n    height: SQUARE_SIZE\n  },\n  scoreText: {\n    position: 'absolute',\n    top: 40,\n    left: 20,\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  instructions: {\n    position: 'absolute',\n    bottom: 40,\n    alignSelf: 'center',\n    fontSize: 18,\n    textAlign: 'center',\n    paddingHorizontal: 20\n  }\n});","map":{"version":3,"names":["React","useState","useRef","useEffect","SafeAreaView","Text","View","StyleSheet","Animated","PanResponder","Dimensions","jsxDEV","_jsxDEV","SQUARE_SIZE","TARGET_SIZE","_Dimensions$get","get","width","height","App","_useState","_useState2","_slicedToArray","score","setScore","_useState3","_useState4","color","setColor","pan","ValueXY","x","y","current","spawnNewSquare","side","Math","floor","random","startX","startY","colors","newColor","length","setValue","isOverTarget","squareX","__getValue","squareY","targetX","targetY","panResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","setOffset","onPanResponderMove","event","dx","dy","useNativeDriver","onPanResponderRelease","flattenOffset","prev","style","styles","container","children","gameContainer","scoreText","fileName","_jsxFileName","lineNumber","columnNumber","targetSquare","_objectSpread","draggableSquare","backgroundColor","transform","translateX","translateY","panHandlers","instructions","flex","position","left","top","fontSize","fontWeight","bottom","alignSelf","textAlign","paddingHorizontal"],"sources":["/workspaces/expo-starter/App.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport {\n  SafeAreaView,\n  Text,\n  View,\n  StyleSheet,\n  Animated,\n  PanResponder,\n  Dimensions\n} from 'react-native';\n\nconst SQUARE_SIZE = 60;\nconst TARGET_SIZE = 100;\nconst { width, height } = Dimensions.get('window');\n\nexport default function App() {\n  const [score, setScore] = useState(0);\n  // Use one source of truth for the square’s (x, y, color)\n  // We'll keep the color in separate state, but let the position be purely animated.\n  const [color, setColor] = useState('red');\n\n  // This Animated.ValueXY will *always* hold the square’s true position on screen.\n  const pan = useRef(new Animated.ValueXY({ x: 0, y: 0 })).current;\n\n  // Create a new colored square at a random position along the edge\n  const spawnNewSquare = () => {\n    const side = Math.floor(Math.random() * 4);\n    let startX = 0, startY = 0;\n\n    switch (side) {\n      case 0: // top\n        startX = Math.random() * (width - SQUARE_SIZE);\n        startY = 0;\n        break;\n      case 1: // right\n        startX = width - SQUARE_SIZE;\n        startY = Math.random() * (height - SQUARE_SIZE);\n        break;\n      case 2: // bottom\n        startX = Math.random() * (width - SQUARE_SIZE);\n        startY = height - SQUARE_SIZE;\n        break;\n      case 3: // left\n        startX = 0;\n        startY = Math.random() * (height - SQUARE_SIZE);\n        break;\n    }\n\n    // Random color\n    const colors = ['red', 'blue', 'green', 'purple', 'orange'];\n    const newColor = colors[Math.floor(Math.random() * colors.length)];\n    setColor(newColor);\n\n    // **Set the Animated.ValueXY** to this new position\n    pan.setValue({ x: startX, y: startY });\n  };\n\n  // Initialize the first square\n  useEffect(() => {\n    spawnNewSquare();\n  }, []);\n\n  // Check if the colored square is over the target\n  const isOverTarget = () => {\n    // We can read the actual numeric values from the animated object.\n    const squareX = pan.x.__getValue();\n    const squareY = pan.y.__getValue();\n\n    const targetX = width / 2 - TARGET_SIZE / 2;\n    const targetY = height / 2 - TARGET_SIZE / 2;\n\n    return (\n      squareX < targetX + TARGET_SIZE &&\n      squareX + SQUARE_SIZE > targetX &&\n      squareY < targetY + TARGET_SIZE &&\n      squareY + SQUARE_SIZE > targetY\n    );\n  };\n\n  // Set up the PanResponder\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderGrant: () => {\n        // Capture any existing offset so the square keeps its place after drags\n        pan.setOffset({\n          x: pan.x.__getValue(),\n          y: pan.y.__getValue()\n        });\n        // Reset the delta to zero\n        pan.setValue({ x: 0, y: 0 });\n      },\n      onPanResponderMove: Animated.event(\n        [null, { dx: pan.x, dy: pan.y }],\n        { useNativeDriver: false }\n      ),\n      onPanResponderRelease: () => {\n        // Merge offset + value\n        pan.flattenOffset();\n\n        if (isOverTarget()) {\n          setScore(prev => prev + 1);\n          spawnNewSquare();\n        }\n      }\n    })\n  ).current;\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <View style={styles.gameContainer}>\n        <Text style={styles.scoreText}>Score: {score}</Text>\n\n        {/* Target Square (Gray) */}\n        <View style={styles.targetSquare} />\n\n        {/* Draggable Square (Colored) */}\n        <Animated.View\n          style={[\n            styles.draggableSquare,\n            {\n              backgroundColor: color,\n              transform: [\n                { translateX: pan.x },\n                { translateY: pan.y }\n              ]\n            }\n          ]}\n          {...panResponder.panHandlers}\n        />\n\n        <Text style={styles.instructions}>\n          Drag the colored square to the gray target\n        </Text>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  gameContainer: {\n    flex: 1,\n    position: 'relative',\n  },\n  targetSquare: {\n    position: 'absolute',\n    width: TARGET_SIZE,\n    height: TARGET_SIZE,\n    backgroundColor: 'gray',\n    left: width / 2 - TARGET_SIZE / 2,\n    top: height / 2 - TARGET_SIZE / 2,\n  },\n  draggableSquare: {\n    position: 'absolute',\n    width: SQUARE_SIZE,\n    height: SQUARE_SIZE,\n  },\n  scoreText: {\n    position: 'absolute',\n    top: 40,\n    left: 20,\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  instructions: {\n    position: 'absolute',\n    bottom: 40,\n    alignSelf: 'center',\n    fontSize: 18,\n    textAlign: 'center',\n    paddingHorizontal: 20,\n  },\n});"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,YAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,UAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAW3D,IAAMC,WAAW,GAAG,EAAE;AACtB,IAAMC,WAAW,GAAG,GAAG;AACvB,IAAAC,eAAA,GAA0BL,UAAU,CAACM,GAAG,CAAC,QAAQ,CAAC;EAA1CC,KAAK,GAAAF,eAAA,CAALE,KAAK;EAAEC,MAAM,GAAAH,eAAA,CAANG,MAAM;AAErB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAA0BnB,QAAQ,CAAC,CAAC,CAAC;IAAAoB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9BG,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAGtB,IAAAI,UAAA,GAA0BxB,QAAQ,CAAC,KAAK,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlCE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAGtB,IAAMG,GAAG,GAAG3B,MAAM,CAAC,IAAIM,QAAQ,CAACsB,OAAO,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC,CAAC,CAACC,OAAO;EAGhE,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;IAC3B,IAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C,IAAIC,MAAM,GAAG,CAAC;MAAEC,MAAM,GAAG,CAAC;IAE1B,QAAQL,IAAI;MACV,KAAK,CAAC;QACJI,MAAM,GAAGH,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIrB,KAAK,GAAGJ,WAAW,CAAC;QAC9C2B,MAAM,GAAG,CAAC;QACV;MACF,KAAK,CAAC;QACJD,MAAM,GAAGtB,KAAK,GAAGJ,WAAW;QAC5B2B,MAAM,GAAGJ,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIpB,MAAM,GAAGL,WAAW,CAAC;QAC/C;MACF,KAAK,CAAC;QACJ0B,MAAM,GAAGH,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIrB,KAAK,GAAGJ,WAAW,CAAC;QAC9C2B,MAAM,GAAGtB,MAAM,GAAGL,WAAW;QAC7B;MACF,KAAK,CAAC;QACJ0B,MAAM,GAAG,CAAC;QACVC,MAAM,GAAGJ,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIpB,MAAM,GAAGL,WAAW,CAAC;QAC/C;IACJ;IAGA,IAAM4B,MAAM,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;IAC3D,IAAMC,QAAQ,GAAGD,MAAM,CAACL,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGG,MAAM,CAACE,MAAM,CAAC,CAAC;IAClEf,QAAQ,CAACc,QAAQ,CAAC;IAGlBb,GAAG,CAACe,QAAQ,CAAC;MAAEb,CAAC,EAAEQ,MAAM;MAAEP,CAAC,EAAEQ;IAAO,CAAC,CAAC;EACxC,CAAC;EAGDrC,SAAS,CAAC,YAAM;IACd+B,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAGN,IAAMW,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IAEzB,IAAMC,OAAO,GAAGjB,GAAG,CAACE,CAAC,CAACgB,UAAU,CAAC,CAAC;IAClC,IAAMC,OAAO,GAAGnB,GAAG,CAACG,CAAC,CAACe,UAAU,CAAC,CAAC;IAElC,IAAME,OAAO,GAAGhC,KAAK,GAAG,CAAC,GAAGH,WAAW,GAAG,CAAC;IAC3C,IAAMoC,OAAO,GAAGhC,MAAM,GAAG,CAAC,GAAGJ,WAAW,GAAG,CAAC;IAE5C,OACEgC,OAAO,GAAGG,OAAO,GAAGnC,WAAW,IAC/BgC,OAAO,GAAGjC,WAAW,GAAGoC,OAAO,IAC/BD,OAAO,GAAGE,OAAO,GAAGpC,WAAW,IAC/BkC,OAAO,GAAGnC,WAAW,GAAGqC,OAAO;EAEnC,CAAC;EAGD,IAAMC,YAAY,GAAGjD,MAAM,CACzBO,YAAY,CAAC2C,MAAM,CAAC;IAClBC,4BAA4B,EAAE,SAA9BA,4BAA4BA,CAAA;MAAA,OAAQ,IAAI;IAAA;IACxCC,mBAAmB,EAAE,SAArBA,mBAAmBA,CAAA,EAAQ;MAEzBzB,GAAG,CAAC0B,SAAS,CAAC;QACZxB,CAAC,EAAEF,GAAG,CAACE,CAAC,CAACgB,UAAU,CAAC,CAAC;QACrBf,CAAC,EAAEH,GAAG,CAACG,CAAC,CAACe,UAAU,CAAC;MACtB,CAAC,CAAC;MAEFlB,GAAG,CAACe,QAAQ,CAAC;QAAEb,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAE,CAAC,CAAC;IAC9B,CAAC;IACDwB,kBAAkB,EAAEhD,QAAQ,CAACiD,KAAK,CAChC,CAAC,IAAI,EAAE;MAAEC,EAAE,EAAE7B,GAAG,CAACE,CAAC;MAAE4B,EAAE,EAAE9B,GAAG,CAACG;IAAE,CAAC,CAAC,EAChC;MAAE4B,eAAe,EAAE;IAAM,CAC3B,CAAC;IACDC,qBAAqB,EAAE,SAAvBA,qBAAqBA,CAAA,EAAQ;MAE3BhC,GAAG,CAACiC,aAAa,CAAC,CAAC;MAEnB,IAAIjB,YAAY,CAAC,CAAC,EAAE;QAClBrB,QAAQ,CAAC,UAAAuC,IAAI;UAAA,OAAIA,IAAI,GAAG,CAAC;QAAA,EAAC;QAC1B7B,cAAc,CAAC,CAAC;MAClB;IACF;EACF,CAAC,CACH,CAAC,CAACD,OAAO;EAET,OACErB,OAAA,CAACR,YAAY;IAAC4D,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EACpCvD,OAAA,CAACN,IAAI;MAAC0D,KAAK,EAAEC,MAAM,CAACG,aAAc;MAAAD,QAAA,GAChCvD,OAAA,CAACP,IAAI;QAAC2D,KAAK,EAAEC,MAAM,CAACI,SAAU;QAAAF,QAAA,GAAC,SAAO,EAAC5C,KAAK;MAAA;QAAA+C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAGpD7D,OAAA,CAACN,IAAI;QAAC0D,KAAK,EAAEC,MAAM,CAACS;MAAa;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAGpC7D,OAAA,CAACJ,QAAQ,CAACF,IAAI,EAAAqE,aAAA;QACZX,KAAK,EAAE,CACLC,MAAM,CAACW,eAAe,EACtB;UACEC,eAAe,EAAElD,KAAK;UACtBmD,SAAS,EAAE,CACT;YAAEC,UAAU,EAAElD,GAAG,CAACE;UAAE,CAAC,EACrB;YAAEiD,UAAU,EAAEnD,GAAG,CAACG;UAAE,CAAC;QAEzB,CAAC;MACD,GACEmB,YAAY,CAAC8B,WAAW;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,EAEF7D,OAAA,CAACP,IAAI;QAAC2D,KAAK,EAAEC,MAAM,CAACiB,YAAa;QAAAf,QAAA,EAAC;MAElC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEnB;AAEA,IAAMR,MAAM,GAAG1D,UAAU,CAAC6C,MAAM,CAAC;EAC/Bc,SAAS,EAAE;IACTiB,IAAI,EAAE,CAAC;IACPN,eAAe,EAAE;EACnB,CAAC;EACDT,aAAa,EAAE;IACbe,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ,CAAC;EACDV,YAAY,EAAE;IACZU,QAAQ,EAAE,UAAU;IACpBnE,KAAK,EAAEH,WAAW;IAClBI,MAAM,EAAEJ,WAAW;IACnB+D,eAAe,EAAE,MAAM;IACvBQ,IAAI,EAAEpE,KAAK,GAAG,CAAC,GAAGH,WAAW,GAAG,CAAC;IACjCwE,GAAG,EAAEpE,MAAM,GAAG,CAAC,GAAGJ,WAAW,GAAG;EAClC,CAAC;EACD8D,eAAe,EAAE;IACfQ,QAAQ,EAAE,UAAU;IACpBnE,KAAK,EAAEJ,WAAW;IAClBK,MAAM,EAAEL;EACV,CAAC;EACDwD,SAAS,EAAE;IACTe,QAAQ,EAAE,UAAU;IACpBE,GAAG,EAAE,EAAE;IACPD,IAAI,EAAE,EAAE;IACRE,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd,CAAC;EACDN,YAAY,EAAE;IACZE,QAAQ,EAAE,UAAU;IACpBK,MAAM,EAAE,EAAE;IACVC,SAAS,EAAE,QAAQ;IACnBH,QAAQ,EAAE,EAAE;IACZI,SAAS,EAAE,QAAQ;IACnBC,iBAAiB,EAAE;EACrB;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
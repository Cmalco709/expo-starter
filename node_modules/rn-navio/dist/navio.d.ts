import React from 'react';
import { BottomTabNavigationOptions } from '@react-navigation/bottom-tabs';
import { NavigationContainerRefWithCurrent } from '@react-navigation/native';
import { DrawerNavigationOptions } from '@react-navigation/drawer';
import { TScreenData, TStackData, TTabsData, TModalData, TRootName, Layout, RootProps, ContainerLayoutKeys, TDrawersData, RootSetAs } from './types';
export declare class Navio<ScreenName extends string, StackName extends string, TabsName extends string, ModalName extends string, DrawersName extends string, ScreenData extends TScreenData, StackData extends TStackData<ScreenName>, TabsData extends TTabsData<ScreenName, StackName, DrawersName>, ModalData extends TModalData<ScreenName, StackName>, DrawersData extends TDrawersData<ScreenName, StackName, TabsName>, TabsLayoutName extends ContainerLayoutKeys<TabsData> = ContainerLayoutKeys<TabsData>, DrawersLayoutName extends ContainerLayoutKeys<DrawersData> = ContainerLayoutKeys<DrawersData>, RootName extends TRootName<StackName, TabsName, DrawersName> = TRootName<StackName, TabsName, DrawersName>, RootSetAsNames extends Record<RootSetAs, string> = {
    stacks: StackName;
    tabs: TabsName;
    drawers: DrawersName;
}> {
    static build<ScreenName extends string, StackName extends string, TabsName extends string, ModalName extends string, DrawersName extends string, ScreenData extends TScreenData, StackData extends TStackData<ScreenName>, TabsData extends TTabsData<ScreenName, StackName, DrawersName>, ModalData extends TModalData<ScreenName, StackName>, DrawersData extends TDrawersData<ScreenName, StackName, TabsName>, TabsLayoutName extends ContainerLayoutKeys<TabsData> = ContainerLayoutKeys<TabsData>, DrawersLayoutName extends ContainerLayoutKeys<DrawersData> = ContainerLayoutKeys<DrawersData>, RootName extends TRootName<StackName, TabsName, DrawersName> = TRootName<StackName, TabsName, DrawersName>>(data: Layout<Record<ScreenName, ScreenData>, Record<StackName, StackData>, Record<TabsName, TabsData>, Record<ModalName, ModalData>, Record<DrawersName, DrawersData>, RootName>): Navio<ScreenName, StackName, TabsName, ModalName, DrawersName, ScreenData, StackData, TabsData, ModalData, DrawersData, TabsLayoutName, DrawersLayoutName, RootName, {
        stacks: StackName;
        tabs: TabsName;
        drawers: DrawersName;
    }>;
    private layout;
    private navRef;
    private navIsReadyRef;
    private tunnel;
    private __tabsUpdatedOptions;
    private __drawerUpdatedOptions;
    private __modalParams;
    constructor(data: Layout<Record<ScreenName, ScreenData>, Record<StackName, StackData>, Record<TabsName, TabsData>, Record<ModalName, ModalData>, Record<DrawersName, DrawersData>, RootName>);
    get N(): NavigationContainerRefWithCurrent<any>;
    private get navIsReady();
    private log;
    private __setRoot;
    private getSafeRoot;
    private getCustomDefaultOptions;
    protected navigate: <T extends ScreenName | StackName | TabsName | ModalName, Params extends object | undefined>(name: T, params?: Params | undefined) => void;
    /**
     * `push(...)` action adds a route on top of the stack and navigates forward to it.
     *
     * @param name ScreenName
     * @param params Params
     */
    push<T extends ScreenName, Params extends object | undefined>(name: T, params?: Params): void;
    /**
     * `goBack()` action creator allows to go back to the previous route in history.
     */
    goBack(): void;
    /**
     * `setParams(...)` action allows to update params for a certain route.
     *
     * @param name all available navigation keys. Leave `undefined` if applying for the focused route.
     * @param params object
     */
    setParams<T extends string, Params extends object>(name: T, params: Params): void;
    /**
     * `setRoot(as, name)` action sets a new app root.
     *
     * Tips: It can be used to switch between Tabs, Drawers, and Stacks.
     *
     * @param as used to define the type of the app layout. Possible values: 'stacks' | 'tabs' | 'drawers'.
     * @param name will be autocompleted based on `as` value and current layout configuration.
     */
    setRoot<SetAs extends RootSetAs = RootSetAs, RouteName extends string = RootSetAsNames[SetAs]>(as: SetAs, routeName: RouteName): void;
    /**
     * `stacks` contains navigation actions for stack-based navigators.
     *
     * Available methods:
     *
     * `push`, `pop`, `popToTop`, `setRoot`
     *
     */
    get stacks(): {
        /**
         * `push(...)` action adds a route on top of the stack and navigates forward to it.
         *
         * Tips: It will "hide" tabs.
         *
         * @param name StackName
         */
        push<T extends StackName>(name: T): void;
        /**
         * `pop(...)` action takes you back to a previous screen in the stack.
         *
         * @param count number
         */
        pop(count?: number): void;
        /**
         * `popToPop()` action takes you back to the first screen in the stack, dismissing all the others.
         */
        popToTop(): void;
        /**
         * `setRoot(...)` action sets a new app root from stacks.
         *
         * Tips: It can be used to switch between Auth and App stacks.
         *
         * @param name StackName
         */
        setRoot<T_1 extends StackName>(name: T_1): void;
    };
    /**
     * `tabs` contains navigation actions for tab-based navigators.
     *
     * Available methods:
     *
     * `jumpTo`, `setRoot`
     *
     */
    get tabs(): {
        /**
         * `jumpTo(...)` action can be used to jump to an existing route in the tab navigator.
         *
         * @param name TabName
         */
        jumpTo<T extends TabsLayoutName>(name: T): void;
        /**
         * `updateOptions(...)` action updates provided tab's options.
         *
         * Tips: It can be used to update badge count.
         *
         * @param name name of the tab
         * @param options `BottomTabNavigationOptions` options for the tab.
         */
        updateOptions<T_1 extends TabsLayoutName>(name: T_1, options: BottomTabNavigationOptions): void;
        /**
         * `setRoot(...)` action sets a new app root from tabs.
         *
         * Tips: It can be used to switch between Auth and Tabs.
         *
         * @param name TabsName
         */
        setRoot<T_2 extends TabsName>(name: T_2): void;
    };
    /**
     * `modals` contains navigation actions for modals.
     *
     * Available methods:
     *
     * `show`
     *
     */
    get modals(): {
        /**
         * `show(...)` action can be used to show an existing modal.
         *
         * @param name ModalName
         */
        show<Params extends object | undefined>(name: ModalName, params?: Params | undefined): void;
        /**
         * `getParams(...)` action can be used to get params passed to the modal.
         *
         * @param name ModalName
         */
        getParams<Params_1 extends object | undefined>(name: ModalName): Params_1;
    };
    /**
     * `drawers` contains navigation actions for drawer-based navigators.
     *
     * Available methods:
     *
     * `open`, `close`, `toggle`, `jumpTo`, `setRoot`
     *
     */
    get drawers(): {
        /**
         * `open()` action can be used to open the drawer pane.
         */
        open(): void;
        /**
         * `close()` action can be used to close the drawer pane.
         */
        close(): void;
        /**
         * `toggle()` action can be used to open the drawer pane if closed, or close if open.
         */
        toggle(): void;
        /**
         * `jumpTo(...)` action can be used to jump to an existing route in the drawer navigator.
         *
         * @param name StacksName
         */
        jumpTo<T extends DrawersLayoutName>(name: T): void;
        /**
         * `updateOptions(...)` action updates provided drawer's options.
         *
         * @param name name of the drawer layout
         * @param options `DrawerNavigationOptions` options for the drawer.
         */
        updateOptions<T_1 extends DrawersLayoutName>(name: T_1, options: DrawerNavigationOptions): void;
        /**
         * `setRoot(...)` action sets a new app root from drawers.
         *
         * Tips: It can be used to switch between Auth and Drawers.
         *
         * @param name DrawersName
         */
        setRoot<T_2 extends DrawersName>(name: T_2): void;
    };
    /**
     * `useN()` is the duplicate of `useNavigation()` hook from React Navigation.
     *
     */
    useN(): import("@react-navigation/native").NavigationProp<ReactNavigation.RootParamList, never, undefined, Readonly<{
        key: string;
        index: number;
        routeNames: never[];
        history?: unknown[] | undefined;
        routes: (Readonly<{
            key: string;
            name: never;
            path?: string | undefined;
        }> & Readonly<{
            params: never;
        }> & {
            state?: Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[] | undefined;
                routes: (Readonly<{
                    key: string;
                    name: string;
                    path?: string | undefined;
                }> & Readonly<{
                    params?: Readonly<object | undefined>;
                }> & any)[];
                type: string;
                stale: false;
            }> | import("@react-navigation/native").PartialState<Readonly<{
                key: string;
                index: number;
                routeNames: string[];
                history?: unknown[] | undefined;
                routes: (Readonly<{
                    key: string;
                    name: string;
                    path?: string | undefined;
                }> & Readonly<{
                    params?: Readonly<object | undefined>;
                }> & any)[];
                type: string;
                stale: false;
            }>> | undefined;
        })[];
        type: string;
        stale: false;
    }>, {}, {}>;
    /**
     * `useR()` is the duplicate of `useRoute()` hook from React Navigation.
     *
     */
    useR(): import("@react-navigation/native").RouteProp<import("@react-navigation/native").ParamListBase, string>;
    /**
     * `useParams()` is used to quickly extract params from the React Navigation route.
     *
     */
    useParams<Params = any>(): Params;
    private __StackGetNavigatorProps;
    private __StackGetContainerOpts;
    private __StackGetScreens;
    private StackScreen;
    private Stack;
    private StackContainer;
    private __TabsGet;
    private TabScreen;
    private Tabs;
    private TabsContainer;
    private __DrawerGet;
    private DrawerScreen;
    private Drawer;
    private DrawerContainer;
    private __ModalGet;
    private ModalContainer;
    /**
     * Generates `<Root />` component for provided layout. Returns Stack Navigator.
     */
    private Root;
    /**
     * Generates your app's root component for provided layout.
     * Can be used as `<AppProviders><navio.App /></AppProviders>`
     */
    App: React.FC<RootProps<RootName>>;
}
